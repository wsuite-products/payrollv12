<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright 2020-TODAY WSuite Products <wsuite-products@destiny.ws>
     License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl.html). -->
<odoo>
  <record id="hr_salary_rule_1" model="hr.salary.rule">
    <field name="name">CESANT&#205;AS CONSIGNADAS FONDO</field>
    <field name="code">CESCONSMS</field>
    <field name="category_id" ref="hr_salary_rule_category_MIGSARA"/>
    <field name="code_sara">131</field>
    <field name="sequence">0</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">none</field>
    <field name="amount_select">fix</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days.
                    # inputs: object containing the computed inputs.

                    # Note: returned value have to be set in the variable 'result'

                    result = contract.wage * 0.10</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_2" model="hr.salary.rule">
    <field name="name">INDEMNIZACI&#211;N</field>
    <field name="code">INDEMMS</field>
    <field name="category_id" ref="hr_salary_rule_category_MIGSARA"/>
    <field name="code_sara">201</field>
    <field name="sequence">0</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">none</field>
    <field name="amount_select">fix</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days.
                    # inputs: object containing the computed inputs.

                    # Note: returned value have to be set in the variable 'result'

                    result = contract.wage * 0.10</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_3" model="hr.salary.rule">
    <field name="name">DCTO LEY 1393</field>
    <field name="code">DTTOLEYMS</field>
    <field name="category_id" ref="hr_salary_rule_category_MIGSARA"/>
    <field name="code_sara">750</field>
    <field name="sequence">0</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">none</field>
    <field name="amount_select">fix</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days.
                    # inputs: object containing the computed inputs.

                    # Note: returned value have to be set in the variable 'result'

                    result = contract.wage * 0.10</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_4" model="hr.salary.rule">
    <field name="name">NETO COMPROBANTE DE REGRESI&#211;N</field>
    <field name="code">NETCOMREMS</field>
    <field name="category_id" ref="hr_salary_rule_category_MIGSARA"/>
    <field name="code_sara"></field>
    <field name="sequence">0</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">none</field>
    <field name="amount_select">fix</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days.
                    # inputs: object containing the computed inputs.

                    # Note: returned value have to be set in the variable 'result'

                    result = contract.wage * 0.10</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_5" model="hr.salary.rule">
    <field name="name">NETO LIQUIDACI&#211;N DE CONTRATO</field>
    <field name="code">NETLIQCOMS</field>
    <field name="category_id" ref="hr_salary_rule_category_MIGSARA"/>
    <field name="code_sara"></field>
    <field name="sequence">0</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">none</field>
    <field name="amount_select">fix</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days.
                    # inputs: object containing the computed inputs.

                    # Note: returned value have to be set in the variable 'result'

                    result = contract.wage * 0.10</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_6" model="hr.salary.rule">
    <field name="name">VACACIONES X RETIRO SUST PATRONAL</field>
    <field name="code">VACSUSPATRMS</field>
    <field name="category_id" ref="hr_salary_rule_category_MIGSARA"/>
    <field name="code_sara"></field>
    <field name="sequence">0</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">none</field>
    <field name="amount_select">fix</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days.
                    # inputs: object containing the computed inputs.

                    # Note: returned value have to be set in the variable 'result'

                    result = contract.wage * 0.10</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_7" model="hr.salary.rule">
    <field name="name">NETO X SUSTITUCION PATRONAL</field>
    <field name="code">NETSUSPATRMS</field>
    <field name="category_id" ref="hr_salary_rule_category_MIGSARA"/>
    <field name="code_sara"></field>
    <field name="sequence">0</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">none</field>
    <field name="amount_select">fix</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">
                    # Available variables:
                    #----------------------
                    # payslip: object containing the payslips
                    # employee: hr.employee object
                    # contract: hr.contract object
                    # rules: object containing the rules code (previously computed)
                    # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
                    # worked_days: object containing the computed worked days.
                    # inputs: object containing the computed inputs.

                    # Note: returned value have to be set in the variable 'result'

                    result = contract.wage * 0.10</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_8" model="hr.salary.rule">
    <field name="name">SALARIO BASICO</field>
    <field name="code">BASIC</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">1</field>
    <field name="sequence">1</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result = (worked_days.WORK100.number_of_days )*(contract.fix_wage_amount/ 30)</field>
    <field name="amount_python_compute">result = (worked_days.WORK100.number_of_days )*(contract.fix_wage_amount/ 30)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_9" model="hr.salary.rule">
    <field name="name">SALARIO INTEGRAL</field>
    <field name="code">SALINTE</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">2</field>
    <field name="sequence">2</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result = (worked_days.WORK100.number_of_days )*(contract.fix_wage_amount/ 30)</field>
    <field name="amount_python_compute">result = (worked_days.WORK100.number_of_days )*(contract.fix_wage_amount/ 30)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_10" model="hr.salary.rule">
    <field name="name">CUOTA DE SOSTENIMIENTO PRODUCTIVA</field>
    <field name="code">CUOTASOST</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">3</field>
    <field name="sequence">3</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result = (worked_days.WORK100.number_of_days )*(employee.obtain_value("Salario Minimo", payslip.date_to) / 30)</field>
    <field name="amount_python_compute">result = (worked_days.WORK100.number_of_days )*(employee.obtain_value("Salario Minimo", payslip.date_to) / 30)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_11" model="hr.salary.rule">
    <field name="name">CUOTA DE SOSTENIMIENTO LECTIVA</field>
    <field name="code">CUOTASOST</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">4</field>
    <field name="sequence">4</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result = (worked_days.WORK100.number_of_days )*(employee.obtain_value("Salario Minimo", payslip.date_to) / 30)*0.50</field>
    <field name="amount_python_compute">result = (worked_days.WORK100.number_of_days )*(employee.obtain_value("Salario Minimo", payslip.date_to) / 30)*0.50</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_12" model="hr.salary.rule">
    <field name="name">CUOTA DE SOSTENIMIENTO LECTIVA CALCULO ESPECIAL</field>
    <field name="code">CUOTALEC</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara"></field>
    <field name="sequence">4</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK101</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result = (worked_days.WORK101.number_of_days )*(employee.obtain_value("Salario Minimo", payslip.date_to) / 30)*0.50</field>
    <field name="amount_python_compute">result = (worked_days.WORK101.number_of_days )*(employee.obtain_value("Salario Minimo", payslip.date_to) / 30)*0.50</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_13" model="hr.salary.rule">
    <field name="name">VACACIONES A DISFRUTAR SALARIO TRADICIONAL</field>
    <field name="code">VAC</field>
    <field name="category_id" ref="hr_salary_rule_category_AUS"/>
    <field name="code_sara">32</field>
    <field name="sequence">5</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Vacaciones</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Vacaciones:
  total = (worked_days.Vacaciones.number_of_days )*(contract.fix_wage_amount / 30)
result = employee.round1(total)</field>
    <field name="amount_python_compute">total = 0
if worked_days.Vacaciones:
  total = (worked_days.Vacaciones.number_of_days )*(contract.fix_wage_amount / 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_14" model="hr.salary.rule">
    <field name="name">VACACIONES A DISFRUTAR SALARIO INTEGRAL</field>
    <field name="code">VAC</field>
    <field name="category_id" ref="hr_salary_rule_category_AUS"/>
    <field name="code_sara">34</field>
    <field name="sequence">6</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Vacaciones</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Vacaciones:
  total = (worked_days.Vacaciones.number_of_days )*(contract.fix_wage_amount / 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Vacaciones:
  total = (worked_days.Vacaciones.number_of_days )*(contract.fix_wage_amount / 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_15" model="hr.salary.rule">
    <field name="name">INCAPACIDAD GENERAL EMPRESA</field>
    <field name="code">INC</field>
    <field name="category_id" ref="hr_salary_rule_category_AUS"/>
    <field name="code_sara">61</field>
    <field name="sequence">7</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Incapacidades</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Incapacidades:
  total = (worked_days.Incapacidades.number_of_days )*(contract.fix_wage_amount/ 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Incapacidades:
  total = (worked_days.Incapacidades.number_of_days )*(contract.fix_wage_amount/ 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_16" model="hr.salary.rule">
    <field name="name">INCAPACIDAD GENERAL ENTIDAD</field>
    <field name="code">INC</field>
    <field name="category_id" ref="hr_salary_rule_category_AUS"/>
    <field name="code_sara">62</field>
    <field name="sequence">8</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Incapacidades</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Incapacidades:
  total = (worked_days.Incapacidades.number_of_days )*(contract.fix_wage_amount/ 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Incapacidades:
  total = (worked_days.Incapacidades.number_of_days )*(contract.fix_wage_amount/ 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_17" model="hr.salary.rule">
    <field name="name">INC ACCIDENTE DE TRABAJO 1 DIA</field>
    <field name="code">INC</field>
    <field name="category_id" ref="hr_salary_rule_category_AUS"/>
    <field name="code_sara">63</field>
    <field name="sequence">9</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Incapacidades</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Incapacidades:
  total = (worked_days.Incapacidades.number_of_days )*(contract.fix_wage_amount/ 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Incapacidades:
  total = (worked_days.Incapacidades.number_of_days )*(contract.fix_wage_amount/ 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_18" model="hr.salary.rule">
    <field name="name">INC ACCIDENTE DE TRABAJO&gt;1 DIA</field>
    <field name="code">INC</field>
    <field name="category_id" ref="hr_salary_rule_category_AUS"/>
    <field name="code_sara">64</field>
    <field name="sequence">10</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Incapacidades</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Incapacidades:
  total = (worked_days.Incapacidades.number_of_days )*(contract.fix_wage_amount/ 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Incapacidades:
  total = (worked_days.Incapacidades.number_of_days )*(contract.fix_wage_amount/ 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_19" model="hr.salary.rule">
    <field name="name">LICENCIA POR LUTO</field>
    <field name="code">LICLUTO</field>
    <field name="category_id" ref="hr_salary_rule_category_AUS"/>
    <field name="code_sara">72</field>
    <field name="sequence">11</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Licencia_Por_Luto:
  total = (worked_days.Licencia_Por_Luto.number_of_days )*(contract.fix_wage_amount / 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Licencia_Por_Luto:
  total =(worked_days.Licencia_Por_Luto.number_of_days )*(contract.fix_wage_amount / 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_20" model="hr.salary.rule">
    <field name="name">LICENCIA DE MATERNIDAD</field>
    <field name="code">LICMATER</field>
    <field name="category_id" ref="hr_salary_rule_category_AUSINC"/>
    <field name="code_sara">67</field>
    <field name="sequence">12</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Licencia_de_Maternidad</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Licencia_de_Maternidad:
  total = (worked_days.Licencia_de_Maternidad.number_of_days )*(contract.fix_wage_amount / 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Licencia_de_Maternidad:
  total = (worked_days.Licencia_de_Maternidad.number_of_days )*(contract.fix_wage_amount / 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_21" model="hr.salary.rule">
    <field name="name">LICENCIA DE PATERNIDAD</field>
    <field name="code">LICPATER</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">68</field>
    <field name="sequence">13</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Licencia_de_Paternidad</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Licencia_de_Paternidad:
  total = (worked_days.Licencia_de_Paternidad.number_of_days )*(contract.fix_wage_amount / 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Licencia_de_Paternidad:
  total = (worked_days.Licencia_de_Paternidad.number_of_days )*(contract.fix_wage_amount / 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_22" model="hr.salary.rule">
    <field name="name">AUXILIO DE TRANSPORTE</field>
    <field name="code">AUXTRANS</field>
    <field name="category_id" ref="hr_salary_rule_category_AUXTRANS"/>
    <field name="code_sara">8</field>
    <field name="sequence">14</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">97032</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">aux = 0
auxval = employee.obtain_value("Salario Minimo", payslip.date_to)*2
if contract.fix_wage_amount &lt; auxval:
  aux = (worked_days.WORK100.number_of_days )*(employee.obtain_value("Auxilio Transporte", payslip.date_to)/30)
result = aux</field>
    <field name="amount_python_compute">aux = 0
auxval = employee.obtain_value("Salario Minimo", payslip.date_to)*2
if contract.fix_wage_amount &lt; auxval:
  aux = (worked_days.WORK100.number_of_days )*(employee.obtain_value("Auxilio Transporte", payslip.date_to)/30)
result = employee.round1(aux)</field>
    <field name="register_id" ref="hr_payroll.contrib_register_employees"/>
  </record>
  <record id="hr_salary_rule_23" model="hr.salary.rule">
    <field name="name">AUXILIO DE TRANSPORTE APOYO SOSTENIMIENTO</field>
    <field name="code">AUXTRANS</field>
    <field name="category_id" ref="hr_salary_rule_category_AUXTRANS"/>
    <field name="code_sara">9</field>
    <field name="sequence">15</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">aux = 0
if contract.fix_wage_amount &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*2:
  aux = (worked_days.WORK100.number_of_days )*(employee.obtain_value("Auxilio Transporte", payslip.date_to)/30)
result= aux</field>
    <field name="amount_python_compute">aux = 0
if contract.fix_wage_amount &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*2:
  aux = (worked_days.WORK100.number_of_days )*(employee.obtain_value("Auxilio Transporte", payslip.date_to)/30)
result= employee.round1(aux)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_24" model="hr.salary.rule">
    <field name="name">DOMINICAL LABORADO CON COMPENSATORIO</field>
    <field name="code">DOCLABCOM</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">16</field>
    <field name="sequence">16</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Dominical_Laborado_Con_Compensatorio</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Dominical_Laborado_Con_Compensatorio:
  total = (worked_days.Dominical_Laborado_Con_Compensatorio.number_of_hours )*((contract.fix_wage_amount/ 30/8)*0.75)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Dominical_Laborado_Con_Compensatorio:
  total = (worked_days.Dominical_Laborado_Con_Compensatorio.number_of_hours )*((contract.fix_wage_amount/ 30/8)*0.75)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_25" model="hr.salary.rule">
    <field name="name">DESCANSO REMUNERADO</field>
    <field name="code">DESREM</field>
    <field name="category_id" ref="hr_salary_rule_category_BASEADIC"/>
    <field name="code_sara">360</field>
    <field name="sequence">17</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = 0
if employee.day_week_friday(contract.date_end):
  amount_total =(contract.fix_wage_amount / 30)* 2
result = amount_total</field>
    <field name="amount_python_compute">amount_total = 0
if employee.day_week_friday(contract.date_end):
  amount_total =(contract.fix_wage_amount / 30)* 2
result = employee.round1(amount_total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_26" model="hr.salary.rule">
    <field name="name">HORA EXTRA DIURNA</field>
    <field name="code">HREXDI</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">10</field>
    <field name="sequence">18</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Hora_Extra_Diurna</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Hora_Extra_Diurna:
  total = (worked_days.Hora_Extra_Diurna.number_of_hours )*((contract.fix_wage_amount/ 30/8)*1.25)
result = employee.round1(total)</field>
    <field name="amount_python_compute">total = 0
if worked_days.Hora_Extra_Diurna:
  total = (worked_days.Hora_Extra_Diurna.number_of_hours )*((contract.fix_wage_amount/ 30/8)*1.25)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_27" model="hr.salary.rule">
    <field name="name">HORA EXTRA NOCTURNA</field>
    <field name="code">HREXNOC</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">11</field>
    <field name="sequence">19</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Hora_Extra_Diurna</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Hora_Extra_Diurna:
  total = (worked_days.Hora_Extra_Diurna.number_of_hours )*((contract.fix_wage_amount/ 30/8)*1.25)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Hora_Extra_Diurna:
  total = (worked_days.Hora_Extra_Diurna.number_of_hours )*((contract.fix_wage_amount/ 30/8)*1.75)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_28" model="hr.salary.rule">
    <field name="name">HORA EXTRA DIURNA FESTIVA</field>
    <field name="code">HREXDIFE</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">13</field>
    <field name="sequence">20</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Hora_Extra_Diurna_Festiva</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Hora_Extra_Diurna_Festiva:
  total = (worked_days.Hora_Extra_Diurna_Festiva.number_of_hours )*((contract.fix_wage_amount/ 30/8)*2)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Hora_Extra_Diurna_Festiva:
  total = (worked_days.Hora_Extra_Diurna_Festiva.number_of_hours )*((contract.fix_wage_amount/ 30/8)*2)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_29" model="hr.salary.rule">
    <field name="name">HORA EXTRA NOCTURNA FESTIVA</field>
    <field name="code">HREXNOCFE</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">14</field>
    <field name="sequence">21</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Hora_Extra_Nocturna_Festiva</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Hora_Extra_Nocturna_Festiva:
  total = (worked_days.Hora_Extra_Nocturna_Festiva.number_of_hours )*((contract.fix_wage_amount/ 30/8)*2.5)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Hora_Extra_Nocturna_Festiva:
  total = (worked_days.Hora_Extra_Nocturna_Festiva.number_of_hours )*((contract.fix_wage_amount/ 30/8)*2.5)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_30" model="hr.salary.rule">
    <field name="name">RECARGO NOCTURNO</field>
    <field name="code">RECNOC</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">15</field>
    <field name="sequence">22</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Recargo_Nocturno</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Recargo_Nocturno:
  total = (worked_days.Recargo_Nocturno.number_of_hours )*((contract.fix_wage_amount/ 30/8)*0.35)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Recargo_Nocturno:
  total = (worked_days.Recargo_Nocturno.number_of_hours )*((contract.fix_wage_amount/ 30/8)*0.35)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_31" model="hr.salary.rule">
    <field name="name">INCAPACIDAD</field>
    <field name="code">INC</field>
    <field name="category_id" ref="hr_salary_rule_category_AUSINC"/>
    <field name="code_sara">62</field>
    <field name="sequence">23</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Incapacidad</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Incapacidad:
  total = (worked_days.Incapacidad.number_of_days )*(contract.fix_wage_amount/ 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Incapacidad:
  total = (worked_days.Incapacidad.number_of_days )*(contract.fix_wage_amount/ 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_32" model="hr.salary.rule">
    <field name="name">AUXILIO MONETARIO DE TELETRABAJO</field>
    <field name="code">AUXTELTRAB</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara">330</field>
    <field name="sequence">24</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Auxilio Monetario Tele Trabajo")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Auxilio Monetario Tele Trabajo")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_33" model="hr.salary.rule">
    <field name="name">LICENCIA REMUNERADA</field>
    <field name="code">LICREMUN</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">73</field>
    <field name="sequence">25</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Licencia_Remunerada</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Licencia_Remunerada:
  total = (worked_days.Licencia_Remunerada.number_of_days )*(contract.fix_wage_amount / 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Licencia_Remunerada:
  total = (worked_days.Licencia_Remunerada.number_of_days )*(contract.fix_wage_amount / 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_34" model="hr.salary.rule">
    <field name="name">APOYO PASANTES</field>
    <field name="code">APOYPASANTES</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">5</field>
    <field name="sequence">26</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result = (worked_days.WORK100.number_of_days )*(contract.fix_wage_amount / 30)</field>
    <field name="amount_python_compute">result = (worked_days.WORK100.number_of_days )*(contract.fix_wage_amount / 30)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_35" model="hr.salary.rule">
    <field name="name">AJUSTE SUELDO</field>
    <field name="code">AJUSTESUEL</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">326</field>
    <field name="sequence">27</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Sueldo")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Sueldo")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_36" model="hr.salary.rule">
    <field name="name">AJUSTE ETAPA PRODUCTIVA</field>
    <field name="code">AJUSETPROD</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">57</field>
    <field name="sequence">28</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Etapa Productiva")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Etapa Productiva")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_37" model="hr.salary.rule">
    <field name="name">AJUSTE AUX TRANSPORTE</field>
    <field name="code">AJUSAUXTRANS</field>
    <field name="category_id" ref="hr_salary_rule_category_AUXTRANS"/>
    <field name="code_sara">817</field>
    <field name="sequence">29</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Aux Transporte")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Aux Transporte")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_38" model="hr.salary.rule">
    <field name="name">SALARIO MES ANTERIOR</field>
    <field name="code">SALMESANT</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara"></field>
    <field name="sequence">30</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Salario_mes_anterior</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Salario_mes_anterior:
  total = (worked_days.Salario_mes_anterior.number_of_days )*(contract.fix_wage_amount / 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Salario_mes_anterior:
  total = (worked_days.Salario_mes_anterior.number_of_days )*(contract.fix_wage_amount / 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_39" model="hr.salary.rule">
    <field name="name">SALARIO INTEGLAL MES ANTERIOR</field>
    <field name="code">SALINTEMESANT</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara"></field>
    <field name="sequence">31</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Salario_Integral_mes_anterior</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Salario_Integral_mes_anterior:
  total = (worked_days.Salario_Integral_mes_anterior.number_of_days )*(contract.fix_wage_amount / 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Salario_Integral_mes_anterior:
  total = (worked_days.Salario_Integral_mes_anterior.number_of_days )*(contract.fix_wage_amount / 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_40" model="hr.salary.rule">
    <field name="name">CUOTA DE SOSTENIMIENTO PRODUCTIVA-75%</field>
    <field name="code">CUOTASOST</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">3</field>
    <field name="sequence">32</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result = (worked_days.WORK100.number_of_days )*(employee.obtain_value("Salario Minimo", payslip.date_to) / 30)*0.75</field>
    <field name="amount_python_compute">result = (worked_days.WORK100.number_of_days )*(employee.obtain_value("Salario Minimo", payslip.date_to) / 30)*0.75</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_41" model="hr.salary.rule">
    <field name="name">COMISION</field>
    <field name="code">CMSN</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara"></field>
    <field name="sequence">33</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "comisi&#243;n")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "comisi&#243;n")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_42" model="hr.salary.rule">
    <field name="name">INTERESES DE CESANTIAS A&#209;O ANTERIOR</field>
    <field name="code">INTCESA&#209;OANT</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara">138</field>
    <field name="sequence">41</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0 
acum=0
if payslip.pay_contributions:
  acum = employee.get_value_line_payslip_before(payslip, ('ACUMULADO PROV INT CESANTIAS'))
if payslip.date_to and payslip.pay_annual:
  intcespag=0
result=total+acum</field>
    <field name="amount_python_compute">total = 0 
acum=0
if payslip.pay_contributions:
  acum = employee.get_value_line_payslip_before(payslip, ('ACUMULADO PROV INT CESANTIAS'))
if payslip.date_to and payslip.pay_annual:
  intcespag=0
result=employee.round1(total+acum)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_43" model="hr.salary.rule">
    <field name="name">PRIMA LEGAL</field>
    <field name="code">PRIMA</field>
    <field name="category_id" ref="hr_salary_rule_category_PRIMA"/>
    <field name="code_sara">132</field>
    <field name="sequence">42</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if not contract.date_end:
  if payslip.date_to and payslip.pay_biannual:
    prom=employee.get_average_paid_biannual(payslip.date_from, payslip)
    days=employee.get_days_biannual(payslip.date_to)
    amount =prom/days*30
    total =(amount*days)/360
result=total</field>
    <field name="amount_python_compute">total = 0
if not contract.date_end:
  if payslip.date_to and payslip.pay_biannual:
    prom=employee.get_average_paid_biannual(payslip.date_from, payslip)
    days=employee.get_days_biannual(payslip.date_to)
    amount =prom/days*30
    total =(amount*days)/360
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_44" model="hr.salary.rule">
    <field name="name">PRIMA LEGAL DEFINITIVA</field>
    <field name="code">PRIMADEF</field>
    <field name="category_id" ref="hr_salary_rule_category_PRIMA"/>
    <field name="code_sara">133</field>
    <field name="sequence">43</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if contract.date_end:
  if payslip.date_to and payslip.pay_biannual:
    prom=employee.get_average_paid_biannual_termination(contract.date_end, payslip, ('BASIC', 'AJUSSAL' ,'AUSAJUS', 'AUS', 'AUSINC', 'AUXTRANS'))
    days=employee.get_days_biannual(contract.date_end)
    amount =prom/days*30
    total =(amount*days)/360
if worked_days.WORK100.number_of_days &lt; 0:
 total = total - employee.get_value_line_payslip_before(payslip, ('PRIMA LEGAL'))
result=total</field>
    <field name="amount_python_compute">total = 0
if contract.date_end:
  if payslip.date_to and payslip.pay_biannual:
    prom=employee.get_average_paid_biannual_termination(contract.date_end, payslip, ('BASIC', 'AJUSSAL' ,'AUSAJUS', 'AUS', 'AUSINC', 'AUXTRANS'))
    days=employee.get_days_biannual(contract.date_end)
    amount =prom/days*30
    total =(amount*days)/360
if worked_days.WORK100.number_of_days &lt; 0:
 total = total - employee.get_value_line_payslip_before(payslip, ('PRIMA LEGAL'))
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_45" model="hr.salary.rule">
    <field name="name">CESANT&#205;AS A&#209;O ANTERIOR</field>
    <field name="code">CESANTIAS</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara">137</field>
    <field name="sequence">44</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.pay_contributions:
  total = employee.get_value_line_payslip_before(payslip, ('CESANTIAS CONSOLIDADAS'))
if payslip.date_to and payslip.pay_annual:
  cespag=0
result=total</field>
    <field name="amount_python_compute">total = 0
if payslip.pay_contributions:
  total = employee.get_value_line_payslip_before(payslip, ('CESANTIAS CONSOLIDADAS'))
if payslip.date_to and payslip.pay_annual:
  cespag=0
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_46" model="hr.salary.rule">
    <field name="name">CESANTIAS POR RETIRO</field>
    <field name="code">CESRET</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara">139</field>
    <field name="sequence">45</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to and payslip.pay_annual:
  cespag=0
  cespag=employee.get_acumulate_month_before(payslip.date_to, "CESANTIAS_PAGADAS") 
  prom=employee.get_average_paid_annual_termination(contract.date_end, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(contract.date_end)
  amount =prom/days*30
  total =(amount*days)/360 - cespag
result=total</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to and payslip.pay_annual:
  cespag=0
  cespag=employee.get_acumulate_month_before(payslip.date_to, "CESANTIAS_PAGADAS") 
  prom=employee.get_average_paid_annual_termination(contract.date_end, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(contract.date_end)
  amount =prom/days*30
  total =(amount*days)/360 - cespag
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_47" model="hr.salary.rule">
    <field name="name">INTERESES DE CESANTIAS POR RETIRO</field>
    <field name="code">INTCESRET</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara">140</field>
    <field name="sequence">46</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0 
if payslip.date_to and payslip.pay_annual:
  intcespag=0
  intcespag=employee.get_acumulate_month_before(payslip.date_to, "INT_CES_PAGADAS") 
  prom=employee.get_average_paid_annual_termination(contract.date_end, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(contract.date_end)
  amount =prom/days*30
  total =(amount*days)/360 
  total =(total*days*0.12)/360 - intcespag
result=total</field>
    <field name="amount_python_compute">total = 0 
if payslip.date_to and payslip.pay_annual:
  intcespag=0
  intcespag=employee.get_acumulate_month_before(payslip.date_to, "INT_CES_PAGADAS") 
  prom=employee.get_average_paid_annual_termination(contract.date_end, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(contract.date_end)
  amount =prom/days*30
  total =(amount*days)/360 
  total =(total*days*0.12)/360 - intcespag
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_48" model="hr.salary.rule">
    <field name="name">VACACIONES POR RETIRO S.I.</field>
    <field name="code">VACRETSI</field>
    <field name="category_id" ref="hr_salary_rule_category_VACACIONES"/>
    <field name="code_sara">142</field>
    <field name="sequence">47</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to and payslip.pay_annual:
  total = employee.holidays_month_actual(payslip.date_to, payslip)*(contract.wage/30)
if total&lt;0:
  total=0
result=total</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to and payslip.pay_annual:
  total = employee.holidays_month_actual(payslip.date_to, payslip)*(contract.wage/30)
if total&lt;0:
  total=0
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_49" model="hr.salary.rule">
    <field name="name">VACACIONES POR RETIRO</field>
    <field name="code">VACRET</field>
    <field name="category_id" ref="hr_salary_rule_category_VACACIONES"/>
    <field name="code_sara">141</field>
    <field name="sequence">48</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to and payslip.pay_annual:
  total = employee.holidays_month_actual(payslip.date_to, payslip)*(contract.wage/30)
if total&lt;0:
  total=0
result=total</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to and payslip.pay_annual:
  total = employee.holidays_month_actual(payslip.date_to, payslip)*(contract.wage/30)
if total&lt;0:
  total=0
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_50" model="hr.salary.rule">
    <field name="name">INDEMNIZACION NUEVOFLEX</field>
    <field name="code">INDEMNF</field>
    <field name="category_id" ref="hr_salary_rule_category_INDEM"/>
    <field name="code_sara">201</field>
    <field name="sequence">49</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.fix_wage_amount/30
total = 0
if payslip.unjustified:
  ley1991 = employee.calculate_year_input(payslip)
  total_days = employee.round2(employee.calculate_days_compensation(payslip))
  if not contract.type_id.date_end_required:
    if ley1991 == 0:
      if total_days &gt; 0:
        if contract.fix_wage_amount &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
          if total_days &lt;= 360:
            acc_days = 30
          else:
            total_days = total_days - 360
            acc_days = (20/360)*total_days
            acc_days += 30
          total = acc_days*wage_day
        else:
          if total_days &lt;= 360:
            acc_days = 20
          else:
            acc_days = 20
            total_days = total_days - 360
            acc_days = (15/360)*total_days
            acc_days += 20
          total = acc_days*wage_day
    else:
      if total_days &lt;= 360:
        acc_days = 45
      else:
        total_days = total_days - 360
        employee.imprimir_valores(total_days, "totaldias")
        acc_days = (40/360)*total_days
        employee.imprimir_valores(acc_days, "acumulado")
        acc_days += 45
        employee.imprimir_valores(acc_days, "acumulado")
      total = acc_days*wage_day
    if payslip.unjustified:
      total_final = total
result=total_final</field>
    <field name="amount_python_compute">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.fix_wage_amount/30
total = 0
if payslip.unjustified:
  ley1991 = employee.calculate_year_input(payslip)
  total_days = employee.round2(employee.calculate_days_compensation(payslip))
  if not contract.type_id.date_end_required:
    if ley1991 == 0:
      if total_days &gt; 0:
        if contract.fix_wage_amount &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
          if total_days &lt;= 360:
            acc_days = 30
          else:
            total_days = total_days - 360
            acc_days = (20/360)*total_days
            acc_days += 30
          total = acc_days*wage_day
        else:
          if total_days &lt;= 360:
            acc_days = 20
          else:
            acc_days = 20
            total_days = total_days - 360
            acc_days = (15/360)*total_days
            acc_days += 20
          total = acc_days*wage_day
    else:
      if total_days &lt;= 360:
        acc_days = 45
      else:
        total_days = total_days - 360
        employee.imprimir_valores(total_days, "totaldias")
        acc_days = (40/360)*total_days
        employee.imprimir_valores(acc_days, "acumulado")
        acc_days += 45
        employee.imprimir_valores(acc_days, "acumulado")
      total = acc_days*wage_day
    if payslip.unjustified:
      total_final = total
result=employee.round1(total_final)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_51" model="hr.salary.rule">
    <field name="name">CESANTIAS PARCIALES</field>
    <field name="code">CESPARC</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara">37</field>
    <field name="sequence">50</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'CESPARC':
        cespag=0
        cespag=employee.get_acumulate_month_before(payslip.date_to, "CESANTIAS_PAGADAS")
        prom=employee.get_average_paid_annual(payslip.date_from, payslip)
        days=employee.get_days_annual(payslip.date_to)
        amount =prom/days*30
        total =(amount*days)/360 - cespag
result=total</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'CESPARC':
        cespag=0
        cespag=employee.get_acumulate_month_before(payslip.date_to, "CESANTIAS_PAGADAS")
        prom=employee.get_average_paid_annual(payslip.date_from, payslip)
        days=employee.get_days_annual(payslip.date_to)
        amount =prom/days*30
        total =(amount*days)/360 - cespag
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_52" model="hr.salary.rule">
    <field name="name">CESANTIAS - CAMBIO SALARIO</field>
    <field name="code">CESCAMSAL</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara">54</field>
    <field name="sequence">51</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
cespag=0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'CESCAMSAL':
        cespag=employee.get_acumulate_month_before(payslip.date_to, "CESANTIAS_PAGADAS")        
        prom=employee.get_average_paid_annual(contract.father_contract_id.date_end, payslip)       
        days=employee.get_days_annual(contract.father_contract_id.date_end)
        amount =prom/days*30
        total =(amount*days)/360 - cespag
result=total</field>
    <field name="amount_python_compute">total = 0
cespag=0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'CESCAMSAL':
        cespag=employee.get_acumulate_month_before(payslip.date_to, "CESANTIAS_PAGADAS")        
        prom=employee.get_average_paid_annual(contract.father_contract_id.date_end, payslip)       
        days=employee.get_days_annual(contract.father_contract_id.date_end)
        amount =prom/days*30
        total =(amount*days)/360 - cespag
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_53" model="hr.salary.rule">
    <field name="name">INTERESES DE CESANTIAS - CAMBIO SALARIO</field>
    <field name="code">INTCESCAMSAL</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara">55</field>
    <field name="sequence">52</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'INTCESCAMSAL':
        intcespag=0
        intcespag=employee.get_acumulate_month_before(payslip.date_to, "INT_CES_PAGADAS")
        prom=employee.get_average_paid_annual(contract.father_contract_id.date_end, payslip)
        days=employee.get_days_annual(contract.father_contract_id.date_end)
        amount =prom/days*30
        total =(amount*days)/360 
        total =(total*days*0.12)/360 - intcespag
result=total</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'INTCESCAMSAL':
        intcespag=0
        intcespag=employee.get_acumulate_month_before(payslip.date_to, "INT_CES_PAGADAS")
        prom=employee.get_average_paid_annual(contract.father_contract_id.date_end, payslip)
        days=employee.get_days_annual(contract.father_contract_id.date_end)
        amount =prom/days*30
        total =(amount*days)/360 
        total =(total*days*0.12)/360 - intcespag
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_54" model="hr.salary.rule">
    <field name="name">VACACIONES EN DINERO SALARIO TRADICIONAL</field>
    <field name="code">VACDINSALTRAD</field>
    <field name="category_id" ref="hr_salary_rule_category_VACACIONES"/>
    <field name="code_sara">36</field>
    <field name="sequence">53</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Vacaciones_en_dinero</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Vacaciones_en_dinero:
  total = (worked_days.Vacaciones_en_dinero.number_of_days )*(contract.fix_wage_amount / 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Vacaciones_en_dinero:
  total = (worked_days.Vacaciones_en_dinero.number_of_days )*(contract.fix_wage_amount / 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_55" model="hr.salary.rule">
    <field name="name">VACACIONES EN DINERO SALARIO INTEGRAL</field>
    <field name="code">VACDINSALINT</field>
    <field name="category_id" ref="hr_salary_rule_category_VACACIONES"/>
    <field name="code_sara">39</field>
    <field name="sequence">54</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Vacaciones_en_dinero</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Vacaciones_en_dinero:
  total = (worked_days.Vacaciones_en_dinero.number_of_days )*(contract.wage / 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Vacaciones_en_dinero:
  total = (worked_days.Vacaciones_en_dinero.number_of_days )*(contract.wage / 30)
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_56" model="hr.salary.rule">
    <field name="name">INTERESES DE CESANTIAS PARCIALES</field>
    <field name="code">INTCESPAR</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara">31</field>
    <field name="sequence">55</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'INTCESPAR':
        intcespag=0
        intcespag=employee.get_acumulate_month_before(payslip.date_to, "INT_CES_PAGADAS")
        prom=employee.get_average_paid_annual(payslip.date_from, payslip)
        days=employee.get_days_annual(payslip.date_to)
        amount =prom/days*30
        total =(amount*days)/360 
        total =(total*days*0.12)/360 - intcespag
result=total</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'INTCESPAR':
        intcespag=0
        intcespag=employee.get_acumulate_month_before(payslip.date_to, "INT_CES_PAGADAS")
        prom=employee.get_average_paid_annual(payslip.date_from, payslip)
        days=employee.get_days_annual(payslip.date_to)
        amount =prom/days*30
        total =(amount*days)/360 
        total =(total*days*0.12)/360 - intcespag
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_57" model="hr.salary.rule">
    <field name="name">INTERESES DE CESANTIAS CAMBIO VINCULACION</field>
    <field name="code">INTCESCAMVIN</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara">315</field>
    <field name="sequence">56</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'INTCESCAMVIN':
        intcespag=0
        intcespag=employee.get_acumulate_month_before(payslip.date_to, "INT_CES_PAGADAS")
        prom=employee.get_average_paid_annual(payslip.date_from, payslip)
        days=employee.get_days_annual(payslip.date_to)
        amount =prom/days*30
        total =(amount*days)/360 
        total =(amount*days*0.12)/360 - intcespag
result=total</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'INTCESCAMVIN':
        intcespag=0
        intcespag=employee.get_acumulate_month_before(payslip.date_to, "INT_CES_PAGADAS")
        prom=employee.get_average_paid_annual(payslip.date_from, payslip)
        days=employee.get_days_annual(payslip.date_to)
        amount =prom/days*30
        total =(amount*days)/360 
        total =(amount*days*0.12)/360 - intcespag
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_58" model="hr.salary.rule">
    <field name="name">CESANTIAS CAMBIO VINCULACION</field>
    <field name="code">CESCAMVIN</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara">314</field>
    <field name="sequence">57</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'CESCAMVIN':
        cespag=0
        cespag=employee.get_acumulate_month_before(payslip.date_to, "CESANTIAS_PAGADAS")
        prom=employee.get_average_paid_annual(payslip.date_from, payslip)
        days=employee.get_days_annual(payslip.date_to)
        amount =prom/days*30
        total =(amount*days)/360 - cespag
result=total</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'CESCAMVIN':
        cespag=0
        cespag=employee.get_acumulate_month_before(payslip.date_to, "CESANTIAS_PAGADAS")
        prom=employee.get_average_paid_annual(payslip.date_from, payslip)
        days=employee.get_days_annual(payslip.date_to)
        amount =prom/days*30
        total =(amount*days)/360 - cespag
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_59" model="hr.salary.rule">
    <field name="name">AJUSTE INDEMNIZACION</field>
    <field name="code">AJUSINDEM</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">21</field>
    <field name="sequence">58</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Indemnizacion")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Indemnizacion")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_60" model="hr.salary.rule">
    <field name="name">INDEMNIZACION TRADI Y ANTFLEX</field>
    <field name="code">INDEMANTFLEX</field>
    <field name="category_id" ref="hr_salary_rule_category_INDEM"/>
    <field name="code_sara"></field>
    <field name="sequence">59</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.wage/30
total = 0 
ley1991 = employee.calculate_year_input(payslip)
if not contract.type_id.date_end_required and payslip.unjustified:
  if ley1991 == 0:
    total_days = employee.round2(employee.calculate_days_compensation(payslip))
    if total_days &gt; 0:
      if contract.wage &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
        if total_days &lt;= 360:
          acc_days = 30
        else:
          total_days = total_days - 360
          acc_days = (20/360)*total_days
          acc_days += 30
        total = acc_days*wage_day
      else:
        if total_days &lt;= 360:
          acc_days = 20
        else:
          acc_days = 20
          total_days = total_days - 360
          acc_days = (15/360)*total_days
          acc_days += 20
        total = acc_days*wage_day
  else:
    if total_days &lt;= 360:
      acc_days = 45
    else:
      total_days = total_days - 360
      employee.imprimir_valores(total_days, "totaldias")
      acc_days = (40/360)*total_days
      employee.imprimir_valores(acc_days, "acumulado")
      acc_days += 45
      employee.imprimir_valores(acc_days, "acumulado")
    total = acc_days*wage_day
total_final = total
result =total_final</field>
    <field name="amount_python_compute">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.wage/30
total = 0 
ley1991 = employee.calculate_year_input(payslip)
if not contract.type_id.date_end_required and payslip.unjustified:
  if ley1991 == 0:
    total_days = employee.round2(employee.calculate_days_compensation(payslip))
    if total_days &gt; 0:
      if contract.wage &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
        if total_days &lt;= 360:
          acc_days = 30
        else:
          total_days = total_days - 360
          acc_days = (20/360)*total_days
          acc_days += 30
        total = acc_days*wage_day
      else:
        if total_days &lt;= 360:
          acc_days = 20
        else:
          acc_days = 20
          total_days = total_days - 360
          acc_days = (15/360)*total_days
          acc_days += 20
        total = acc_days*wage_day
  else:
    if total_days &lt;= 360:
      acc_days = 45
    else:
      total_days = total_days - 360
      employee.imprimir_valores(total_days, "totaldias")
      acc_days = (40/360)*total_days
      employee.imprimir_valores(acc_days, "acumulado")
      acc_days += 45
      employee.imprimir_valores(acc_days, "acumulado")
    total = acc_days*wage_day
total_final = total
result =employee.round1(total_final)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_61" model="hr.salary.rule">
    <field name="name">INDEMNIZACION DI</field>
    <field name="code">INDEMDESINT</field>
    <field name="category_id" ref="hr_salary_rule_category_INDEM"/>
    <field name="code_sara"></field>
    <field name="sequence">60</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total_days = 0
total_final = 0
acc_days = 0
wage_day =  employee.obtain_value("Salario Minimo", payslip.date_to)*13/30
total = 0 
ley1991 = employee.calculate_year_input(payslip)
if not contract.type_id.date_end_required and payslip.unjustified:
  if ley1991 == 0:
    total_days = employee.round2(employee.calculate_days_compensation(payslip))
    if total_days &gt; 0:
      if contract.wage &lt; employee.obtain_value(&#8216;Salario Minimo&#8217;, payslip.date_to)*10:
        if total_days &lt;= 360:
          acc_days = 30
        else:
          total_days = total_days - 360
          acc_days = (20/360)*total_days
          acc_days += 30
        total = acc_days*wage_day
      else:
        if total_days &lt;= 360:
          acc_days = 20
        else:
          acc_days = 20
          total_days = total_days - 360
          acc_days = (15/360)*total_days
          acc_days += 20
        total = acc_days*wage_day
  else:
    if total_days &lt;= 360:
      acc_days = 45
    else:
      total_days = total_days - 360
      employee.imprimir_valores(total_days, "totaldias")
      acc_days = (40/360)*total_days
      employee.imprimir_valores(acc_days, "acumulado")
      acc_days += 45
      employee.imprimir_valores(acc_days, "acumulado")
    total = acc_days*wage_day
total_final = total
result =total_final</field>
    <field name="amount_python_compute">total_days = 0
total_final = 0
acc_days = 0
wage_day =  employee.obtain_value("Salario Minimo", payslip.date_to)*13/30
total = 0 
ley1991 = employee.calculate_year_input(payslip)
if not contract.type_id.date_end_required and payslip.unjustified:
  if ley1991 == 0:
    total_days = employee.round2(employee.calculate_days_compensation(payslip))
    if total_days &gt; 0:
      if contract.wage &lt; employee.obtain_value(&#8216;Salario Minimo&#8217;, payslip.date_to)*10:
        if total_days &lt;= 360:
          acc_days = 30
        else:
          total_days = total_days - 360
          acc_days = (20/360)*total_days
          acc_days += 30
        total = acc_days*wage_day
      else:
        if total_days &lt;= 360:
          acc_days = 20
        else:
          acc_days = 20
          total_days = total_days - 360
          acc_days = (15/360)*total_days
          acc_days += 20
        total = acc_days*wage_day
  else:
    if total_days &lt;= 360:
      acc_days = 45
    else:
      total_days = total_days - 360
      employee.imprimir_valores(total_days, "totaldias")
      acc_days = (40/360)*total_days
      employee.imprimir_valores(acc_days, "acumulado")
      acc_days += 45
      employee.imprimir_valores(acc_days, "acumulado")
    total = acc_days*wage_day
total_final = total
result =employee.round1(total_final)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_62" model="hr.salary.rule">
    <field name="name">INDEMNIZACION CONTRATO TF</field>
    <field name="code">INDEMTF</field>
    <field name="category_id" ref="hr_salary_rule_category_INDEM"/>
    <field name="code_sara"></field>
    <field name="sequence">61</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.wage/30
if payslip.contract_id.type_id.date_end_required: 
  if payslip.unjustified:
    total_days = employee.round2(employee.calculate_days_compensation_tf(payslip))
    total=total_days*wage_day
    total_final = total
result=employee.round1(total_final)</field>
    <field name="amount_python_compute">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.wage/30
if payslip.contract_id.type_id.date_end_required: 
  if payslip.unjustified:
    total_days = employee.round2(employee.calculate_days_compensation_tf(payslip))
    total=total_days*wage_day
    total_final = total
result=employee.round1(total_final)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_63" model="hr.salary.rule">
    <field name="name">RENUNCIA_B_NUEVOFLEX</field>
    <field name="code">RENUNNF</field>
    <field name="category_id" ref="hr_salary_rule_category_INDEM"/>
    <field name="code_sara"></field>
    <field name="sequence">62</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.fix_wage_amount/30
total = 0 
ley1991 = employee.calculate_year_input(payslip)
if payslip.rule_ids:
  for r_id in payslip.rule_ids:
    if r_id.code == 'RENUNNF':
      total_days = employee.calculate_days_compensation(payslip)
      total_days = employee.round2(total_days)
      if not contract.type_id.date_end_required:
        if ley1991 == 0:
          if total_days &gt; 0:
            if contract.fix_wage_amount &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
              if total_days &lt;= 360:
                acc_days = 30
              else:
                total_days = total_days - 360
                acc_days = (20/360)*total_days
                acc_days += 30
              total = acc_days*wage_day
            else:
              if total_days &lt;= 360:
                acc_days = 20
              else:
                acc_days = 20
                total_days = total_days - 360
                acc_days = (15/360)*total_days
                acc_days += 20
              total = acc_days*wage_day
        else:
          if total_days &lt;= 360:
            acc_days = 45
          else:
            total_days = total_days - 360
            employee.imprimir_valores(total_days, "totaldias")
            acc_days = (40/360)*total_days
            employee.imprimir_valores(acc_days, "acumulado")
            acc_days += 45
            employee.imprimir_valores(acc_days, "acumulado")
          total = acc_days*wage_day
        if payslip.unjustified:
          total_final = total
result =employee.round1(total_final)</field>
    <field name="amount_python_compute">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.fix_wage_amount/30
total = 0 
ley1991 = employee.calculate_year_input(payslip)
if payslip.rule_ids:
  for r_id in payslip.rule_ids:
    if r_id.code == 'RENUNNF':
      total_days = employee.calculate_days_compensation(payslip)
      total_days = employee.round2(total_days)
      if not contract.type_id.date_end_required:
        if ley1991 == 0:
          if total_days &gt; 0:
            if contract.fix_wage_amount &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
              if total_days &lt;= 360:
                acc_days = 30
              else:
                total_days = total_days - 360
                acc_days = (20/360)*total_days
                acc_days += 30
              total = acc_days*wage_day
            else:
              if total_days &lt;= 360:
                acc_days = 20
              else:
                acc_days = 20
                total_days = total_days - 360
                acc_days = (15/360)*total_days
                acc_days += 20
              total = acc_days*wage_day
        else:
          if total_days &lt;= 360:
            acc_days = 45
          else:
            total_days = total_days - 360
            employee.imprimir_valores(total_days, "totaldias")
            acc_days = (40/360)*total_days
            employee.imprimir_valores(acc_days, "acumulado")
            acc_days += 45
            employee.imprimir_valores(acc_days, "acumulado")
          total = acc_days*wage_day
        if payslip.unjustified:
          total_final = total
result =employee.round1(total_final)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_64" model="hr.salary.rule">
    <field name="name">RENUNCIA_B_ TRADI Y ANTFLEX</field>
    <field name="code">RENUNAF</field>
    <field name="category_id" ref="hr_salary_rule_category_INDEM"/>
    <field name="code_sara"></field>
    <field name="sequence">63</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.wage/30
total = 0 
ley1991 = employee.calculate_year_input(payslip)
if payslip.rule_ids:
  for r_id in payslip.rule_ids:
    if r_id.code == 'RENUNAF':
      if not contract.type_id.date_end_required:
        if ley1991 == 0:
          total_days = employee.round2(employee.calculate_days_compensation(payslip))
          if total_days &gt; 0:
            if contract.wage &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
              if total_days &lt;= 360:
                acc_days = 30
              else:
                total_days = total_days - 360
                acc_days = (20/360)*total_days
                acc_days += 30
              total = acc_days*wage_day
            else:
              if total_days &lt;= 360:
                acc_days = 20
              else:
                acc_days = 20
                total_days = total_days - 360
                acc_days = (15/360)*total_days
                acc_days += 20
              total = acc_days*wage_day
        else:
          if total_days &lt;= 360:
            acc_days = 45
          else:
            total_days = total_days - 360
            employee.imprimir_valores(total_days, "totaldias")
            acc_days = (40/360)*total_days
            employee.imprimir_valores(acc_days, "acumulado")
            acc_days += 45
            employee.imprimir_valores(acc_days, "acumulado")
          total = acc_days*wage_day
        if payslip.unjustified:
          total_final = total
result =employee.round1(total_final)</field>
    <field name="amount_python_compute">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.wage/30
total = 0 
ley1991 = employee.calculate_year_input(payslip)
if payslip.rule_ids:
  for r_id in payslip.rule_ids:
    if r_id.code == 'RENUNAF':
      if not contract.type_id.date_end_required:
        if ley1991 == 0:
          total_days = employee.round2(employee.calculate_days_compensation(payslip))
          if total_days &gt; 0:
            if contract.wage &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
              if total_days &lt;= 360:
                acc_days = 30
              else:
                total_days = total_days - 360
                acc_days = (20/360)*total_days
                acc_days += 30
              total = acc_days*wage_day
            else:
              if total_days &lt;= 360:
                acc_days = 20
              else:
                acc_days = 20
                total_days = total_days - 360
                acc_days = (15/360)*total_days
                acc_days += 20
              total = acc_days*wage_day
        else:
          if total_days &lt;= 360:
            acc_days = 45
          else:
            total_days = total_days - 360
            employee.imprimir_valores(total_days, "totaldias")
            acc_days = (40/360)*total_days
            employee.imprimir_valores(acc_days, "acumulado")
            acc_days += 45
            employee.imprimir_valores(acc_days, "acumulado")
          total = acc_days*wage_day
        if payslip.unjustified:
          total_final = total
result =employee.round1(total_final)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_65" model="hr.salary.rule">
    <field name="name">RENUNCIA_B_DI</field>
    <field name="code">RENUNDI</field>
    <field name="category_id" ref="hr_salary_rule_category_INDEM"/>
    <field name="code_sara"></field>
    <field name="sequence">64</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total_days = 0
total_final = 0
acc_days = 0
wage_day =  employee.obtain_value("Salario Minimo", payslip.date_to)*13/30
total = 0 
ley1991 = employee.calculate_year_input(payslip)
if payslip.rule_ids:
  for r_id in payslip.rule_ids and payslip.unjustified:
    if r_id.code == 'RENUNDI':
      if not contract.type_id.date_end_required:
        if ley1991 == 0:
          total_days = employee.round2(employee.calculate_days_compensation(payslip))
          if total_days &gt; 0:
            if contract.wage &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
              if total_days &lt;= 360:
                acc_days = 30
              else:
                total_days = total_days - 360
                acc_days = (20/360)*total_days
                acc_days += 30
              total = acc_days*wage_day
            else:
              if total_days &lt;= 360:
                acc_days = 20
              else:
                acc_days = 20
                total_days = total_days - 360
                acc_days = (15/360)*total_days
                acc_days += 20
              total = acc_days*wage_day
        else:
          if total_days &lt;= 360:
            acc_days = 45
          else:
            total_days = total_days - 360
            employee.imprimir_valores(total_days, "totaldias")
            acc_days = (40/360)*total_days
            employee.imprimir_valores(acc_days, "acumulado")
            acc_days += 45
            employee.imprimir_valores(acc_days, "acumulado")
          total = acc_days*wage_day
total_final = total
result =employee.round1(total_final)</field>
    <field name="amount_python_compute">total_days = 0
total_final = 0
acc_days = 0
wage_day =  employee.obtain_value("Salario Minimo", payslip.date_to)*13/30
total = 0 
ley1991 = employee.calculate_year_input(payslip)
if payslip.rule_ids:
  for r_id in payslip.rule_ids and payslip.unjustified:
    if r_id.code == 'RENUNDI':
      if not contract.type_id.date_end_required:
        if ley1991 == 0:
          total_days = employee.round2(employee.calculate_days_compensation(payslip))
          if total_days &gt; 0:
            if contract.wage &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
              if total_days &lt;= 360:
                acc_days = 30
              else:
                total_days = total_days - 360
                acc_days = (20/360)*total_days
                acc_days += 30
              total = acc_days*wage_day
            else:
              if total_days &lt;= 360:
                acc_days = 20
              else:
                acc_days = 20
                total_days = total_days - 360
                acc_days = (15/360)*total_days
                acc_days += 20
              total = acc_days*wage_day
        else:
          if total_days &lt;= 360:
            acc_days = 45
          else:
            total_days = total_days - 360
            employee.imprimir_valores(total_days, "totaldias")
            acc_days = (40/360)*total_days
            employee.imprimir_valores(acc_days, "acumulado")
            acc_days += 45
            employee.imprimir_valores(acc_days, "acumulado")
          total = acc_days*wage_day
total_final = total
result =employee.round1(total_final)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_66" model="hr.salary.rule">
    <field name="name">RENUNCIA_B_CONTRATO TF</field>
    <field name="code">RENUNCONTTF</field>
    <field name="category_id" ref="hr_salary_rule_category_INDEM"/>
    <field name="code_sara"></field>
    <field name="sequence">65</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.wage/30
if payslip.rule_ids:
  for r_id in payslip.rule_ids:
    if r_id.code == 'RENUNCONTTF':
      if payslip.contract_id.type_id.date_end_required: 
        if payslip.unjustified:
          total_days = employee.round2(employee.calculate_days_compensation_tf(payslip))
          total=total_days*wage_day
          total_final = total
result=employee.round1(total_final)</field>
    <field name="amount_python_compute">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.wage/30
if payslip.rule_ids:
  for r_id in payslip.rule_ids:
    if r_id.code == 'RENUNCONTTF':
      if payslip.contract_id.type_id.date_end_required: 
        if payslip.unjustified:
          total_days = employee.round2(employee.calculate_days_compensation_tf(payslip))
          total=total_days*wage_day
          total_final = total
result=employee.round1(total_final)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_67" model="hr.salary.rule">
    <field name="name">PRIMA - CAMBIO SALARIO</field>
    <field name="code">PRIMCAMSAL</field>
    <field name="category_id" ref="hr_salary_rule_category_PRIMA"/>
    <field name="code_sara"></field>
    <field name="sequence">66</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
cespag=0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'PRIMCAMSAL':
        cespag=employee.get_acumulate_month_before(payslip.date_to, "PRIMA_PAGADA")        
        prom=employee.get_average_paid_biannual(contract.father_contract_id.date_end, payslip)       
        days=employee.get_days_biannual(contract.father_contract_id.date_end)
        amount =prom/days*30
        total =(amount*days)/360 - cespag
result=employee.round1(total)</field>
    <field name="amount_python_compute">total = 0
cespag=0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'PRIMCAMSAL':
        cespag=employee.get_acumulate_month_before(payslip.date_to, "PRIMA_PAGADA")        
        prom=employee.get_average_paid_biannual(contract.father_contract_id.date_end, payslip)       
        days=employee.get_days_biannual(contract.father_contract_id.date_end)
        amount =prom/days*30
        total =(amount*days)/360 - cespag
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_68" model="hr.salary.rule">
    <field name="name">VACACIONES EN DINERO POR RETIRO</field>
    <field name="code">VACDINERETIR</field>
    <field name="category_id" ref="hr_salary_rule_category_VACACIONES"/>
    <field name="code_sara"></field>
    <field name="sequence">67</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Vacaciones en dinero por retiro")
result = amount_total </field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Vacaciones en dinero por retiro")
result = amount_total </field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_69" model="hr.salary.rule">
    <field name="name">RETROACTIVO SUBSIDIO TRANSPORTE</field>
    <field name="code">RETROASUBTRANS</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara"></field>
    <field name="sequence">70</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
days = employee.get_workdays_retroactive(payslip.date_from, "Retroactivo")
if contract.father_contract_id and days &gt; 0:
  if contract.father_contract_id.fix_wage_amount &lt;=employee.obtain_value("Salario Minimo", payslip.date_to)*2 and contract.fix_wage_amount &gt;employee.obtain_value("Salario Minimo", payslip.date_to)*2:
    total=employee.obtain_value("Auxilio Transporte", payslip.date_to)/30*days
result = total*-1</field>
    <field name="amount_python_compute">total = 0
days = employee.get_workdays_retroactive(payslip.date_from, "Retroactivo")
if contract.father_contract_id and days &gt; 0:
  if contract.father_contract_id.fix_wage_amount &lt;=employee.obtain_value("Salario Minimo", payslip.date_to)*2 and contract.fix_wage_amount &gt;employee.obtain_value("Salario Minimo", payslip.date_to)*2:
    total=employee.obtain_value("Auxilio Transporte", payslip.date_to)/30*days
result = total*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_70" model="hr.salary.rule">
    <field name="name">RETROACTIVO SALARIO</field>
    <field name="code">RETROACSAL</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara"></field>
    <field name="sequence">70</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
days = employee.get_workdays_retroactive(payslip.date_from, "Retroactivo")
if contract.father_contract_id and days &gt; 0:
  total = contract.fix_wage_amount -contract.father_contract_id.fix_wage_amount
  if total &gt; 0:
    total = (total/30)*days
result = employee.round1(total)</field>
    <field name="amount_python_compute">total = 0
days = employee.get_workdays_retroactive(payslip.date_from, "Retroactivo")
if contract.father_contract_id and days &gt; 0:
  total = contract.fix_wage_amount -contract.father_contract_id.fix_wage_amount
  if total &gt; 0:
    total = (total/30)*days
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_71" model="hr.salary.rule">
    <field name="name">RETROACTIVO AUXILIOS</field>
    <field name="code">RETROACAUXMON</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara"></field>
    <field name="sequence">71</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
days = employee.get_workdays_retroactive(payslip.date_from, "Retroactivo")
if contract.father_contract_id and days &gt; 0:
  total = contract.flex_wage_amount -contract.father_contract_id.flex_wage_amount
  if total &gt; 0:
    total = (total/30)*days
result = employee.round1(total)</field>
    <field name="amount_python_compute">total = 0
days = employee.get_workdays_retroactive(payslip.date_from, "Retroactivo")
if contract.father_contract_id and days &gt; 0:
  total = contract.flex_wage_amount -contract.father_contract_id.flex_wage_amount
  if total &gt; 0:
    total = (total/30)*days
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_72" model="hr.salary.rule">
    <field name="name">RETROACTIVO VACACIONES</field>
    <field name="code">RETROACVAC</field>
    <field name="category_id" ref="hr_salary_rule_category_AUS"/>
    <field name="code_sara"></field>
    <field name="sequence">72</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
days = employee.get_holidays_retroactive(payslip.date_from, "Retroactivo")
if contract.father_contract_id and days &gt; 0:
  total = contract.fix_wage_amount -contract.father_contract_id.fix_wage_amount
  if total &gt; 0:
    total = (total/30)*days
result = employee.round1(total)</field>
    <field name="amount_python_compute">total = 0
days = employee.get_holidays_retroactive(payslip.date_from, "Retroactivo")
if contract.father_contract_id and days &gt; 0:
  total = contract.fix_wage_amount -contract.father_contract_id.fix_wage_amount
  if total &gt; 0:
    total = (total/30)*days
result = employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_73" model="hr.salary.rule">
    <field name="name">APORTE VOLUNTARIO ADICIONAL CF</field>
    <field name="code">APORVOLADICF</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">300</field>
    <field name="sequence">81</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="True"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'APORVOLADICF':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'APORVOLADICF':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_74" model="hr.salary.rule">
    <field name="name">APORTE INSTITUCIONAL EMPLEADO</field>
    <field name="code">APORINSEMPLE</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara">321</field>
    <field name="sequence">82</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="True"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'APORINSEMPLE':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result=employee.round1(total)</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'APORINSEMPLE':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_75" model="hr.salary.rule">
    <field name="name">AUXILIO DE ALIMENTACION -CF</field>
    <field name="code">AUXALICF</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara">302</field>
    <field name="sequence">83</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="True"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'AUXALICF':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'AUXALICF':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_76" model="hr.salary.rule">
    <field name="name">AUXILIO MONETARIO DE TRANSPORTE CF</field>
    <field name="code">AUXMONTRANS</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara">303</field>
    <field name="sequence">84</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="True"/>
    <field name="autocomplete_flex" eval="True"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'AUXMONTRANS':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'AUXMONTRANS':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_77" model="hr.salary.rule">
    <field name="name">AUXILIO MONETARIO DE VIVIENDA CF</field>
    <field name="code">AUXVIV</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara">304</field>
    <field name="sequence">85</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="True"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'AUXVIV':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'AUXVIV':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_78" model="hr.salary.rule">
    <field name="name">VALES DE ALIMENTACION CF</field>
    <field name="code">VALEALIMCF</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara">320</field>
    <field name="sequence">86</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="True"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'VALEALIMCF':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
#Basado en la ley Art 387 el estatuto tributario
salary  = 0
if categories.BASIC:
  salary  = salary  + categories.BASIC
if categories.AUS:
  salary  = salary  + categories.AUS
if salary  &gt;= employee.obtain_value("UVT", payslip.date_to)*310:
  total = 0
else:
  total = total
if total&gt; employee.obtain_value("UVT", payslip.date_to)*41:
  total=employee.obtain_value("UVT", payslip.date_to)*41
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'VALEALIMCF':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
#Basado en la ley Art 387 el estatuto tributario
salary  = 0
if categories.BASIC:
  salary  = salary  + categories.BASIC
if categories.AUS:
  salary  = salary  + categories.AUS
if salary  &gt;= employee.obtain_value("UVT", payslip.date_to)*310:
  total = 0
else:
  total = total
if total&gt; employee.obtain_value("UVT", payslip.date_to)*41:
  total=employee.obtain_value("UVT", payslip.date_to)*41
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_79" model="hr.salary.rule">
    <field name="name">APORTE INSTITUCIONAL EMPRESA</field>
    <field name="code">APORINSEMPRE</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">301</field>
    <field name="sequence">87</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">Amount = 0
total = 0
base_fs = (contract.flex_wage_amount)
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="amount_python_compute">Amount = 0
total = 0
base_fs = (contract.flex_wage_amount)
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_80" model="hr.salary.rule">
    <field name="name">APORTE INSTITUCIONAL PLUS</field>
    <field name="code">APORINSPLUS</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">322</field>
    <field name="sequence">88</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount = 0
total = 0
if not contract.contribution_pay:
  base_fs = (contract.flex_wage_amount)
  if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
    amount = (base_fs*0.1766666)
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount = 0
total = 0
if not contract.contribution_pay:
  base_fs = (contract.flex_wage_amount)
  if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
    amount = (base_fs*0.1766666)
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_81" model="hr.salary.rule">
    <field name="name">GANA GANA</field>
    <field name="code">GANAGANA</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">305</field>
    <field name="sequence">89</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total_days =0
for line in payslip.worked_days_line_ids:
   total_days = total_days+ line.number_of_days
result = ((((contract.wage)*0.13022)/30)*total_days
 -(((contract.fix_wage_amount)*0.13022)/30)*total_days)/2</field>
    <field name="amount_python_compute">total_days =0
for line in payslip.worked_days_line_ids:
   total_days = total_days+ line.number_of_days
result = ((((contract.wage)*0.13022)/30)*total_days
 -(((contract.fix_wage_amount)*0.13022)/30)*total_days)/2</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_82" model="hr.salary.rule">
    <field name="name">CUPO RENTING VEHICULO</field>
    <field name="code">RENTVEH</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara"></field>
    <field name="sequence">90</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="True"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'RENTVEH':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'RENTVEH':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_83" model="hr.salary.rule">
    <field name="name">CUPO TARJETA DE CREDITO CORPOTATIVA</field>
    <field name="code">TARJCRECORP</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara"></field>
    <field name="sequence">92</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="True"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'TARJCRECORP':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'TARJCRECORP':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_84" model="hr.salary.rule">
    <field name="name">APORTE INSTITUCIONAL EMPRESA (SI)</field>
    <field name="code">APORINSEMPRESI</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">301</field>
    <field name="sequence">93</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount = 0
total = 0
base_fs = (contract.flex_wage_amount*0.70)
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount = 0
total = 0
base_fs = (contract.flex_wage_amount*0.70)
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_85" model="hr.salary.rule">
    <field name="name">AUXILIO MONETARIO VIVIENDA P</field>
    <field name="code">AUXMONVIVP</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">324</field>
    <field name="sequence">94</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount = 0
total = 0
if contract.contribution_pay:
  base_fs = (contract.flex_wage_amount)
  if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
    amount = (base_fs*0.1766666)
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount = 0
total = 0
if contract.contribution_pay:
  base_fs = (contract.flex_wage_amount)
  if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
    amount = (base_fs*0.1766666)
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_86" model="hr.salary.rule">
    <field name="name">GANA GANA (SI)</field>
    <field name="code">GANAGANASI</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">305</field>
    <field name="sequence">95</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total_days =0
for line in payslip.worked_days_line_ids:
   total_days = total_days+ line.number_of_days
result = ((((contract.wage*0.70)*0.13022)/30)*total_days
 -(((contract.fix_wage_amount*0.70)*0.13022)/30)*total_days)/2</field>
    <field name="amount_python_compute">total_days =0
for line in payslip.worked_days_line_ids:
   total_days = total_days+ line.number_of_days
result = ((((contract.wage*0.70)*0.13022)/30)*total_days
 -(((contract.fix_wage_amount*0.70)*0.13022)/30)*total_days)/2</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_87" model="hr.salary.rule">
    <field name="name">APORTES INSTITUCIONAL EMPRESA K</field>
    <field name="code">APORINSTK</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">331</field>
    <field name="sequence">96</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Aporte Institucional K")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Aporte Institucional K")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_88" model="hr.salary.rule">
    <field name="name">APORTE INSTITUCIONAL EMPRESA DI</field>
    <field name="code">APORINSEMPREDI</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">301</field>
    <field name="sequence">97</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount = 0
total = 0
base_fs = contract.fix_wage_amount
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (7988007*0.075)-(base_fs*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
if base_fs &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = base_fs*0
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount = 0
total = 0
base_fs = contract.fix_wage_amount
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (7988007*0.075)-(base_fs*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
if base_fs &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = base_fs*0
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_89" model="hr.salary.rule">
    <field name="name">APORTE INSTITUCIONAL EMPRESA HB</field>
    <field name="code">APORINSEMPREHB</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">301</field>
    <field name="sequence">98</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount = 0
total = 0
base_fs = contract.flex_wage_amount
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.77565*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
if base_fs &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = base_fs*0
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount = 0
total = 0
base_fs = contract.flex_wage_amount
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.77565*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
if base_fs &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = base_fs*0
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_90" model="hr.salary.rule">
    <field name="name">APORTE INSTITUCIONAL PLUS HB</field>
    <field name="code">APORINSPLUSHB</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">322</field>
    <field name="sequence">99</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount = 0
total = 0
base_fs = contract.flex_wage_amount
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.77565*0.176666)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
if base_fs &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = base_fs*0
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount = 0
total = 0
base_fs = contract.flex_wage_amount
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.77565*0.176666)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
if base_fs &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = base_fs*0
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_91" model="hr.salary.rule">
    <field name="name">AUXILIO MONETARIO VIVIENDA (DR)</field>
    <field name="code">AUXMONVIVDR</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara">12</field>
    <field name="sequence">121</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = 0
if employee.day_week_friday(contract.date_end):
  amount_total =(contract.flex_wage_amount / 30)* 2
result = employee.round1(amount_total)</field>
    <field name="amount_python_compute">amount_total = 0
if employee.day_week_friday(contract.date_end):
  amount_total =(contract.flex_wage_amount / 30)* 2
result = employee.round1(amount_total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_92" model="hr.salary.rule">
    <field name="name">ANTICIPO SALARIO</field>
    <field name="code">ANTICSALA</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAMOS"/>
    <field name="code_sara">350</field>
    <field name="sequence">122</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Anticipo Salario")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Anticipo Salario")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_93" model="hr.salary.rule">
    <field name="name">AUXILIO DE CELULAR</field>
    <field name="code">AUXCEL</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara">26</field>
    <field name="sequence">123</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Auxilio Celular")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Auxilio Celular")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_94" model="hr.salary.rule">
    <field name="name">AUXILIO DE RODAMIENTO</field>
    <field name="code">AUXROD</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara">27</field>
    <field name="sequence">125</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">aux = 0
if contract.fix_wage_amount &gt; 1:
  aux = (worked_days.WORK100.number_of_days )*(50000/30)
result= employee.round1(aux)</field>
    <field name="amount_python_compute">aux = 0
if contract.fix_wage_amount &gt; 1:
  aux = (worked_days.WORK100.number_of_days )*(50000/30)
result= employee.round1(aux)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_95" model="hr.salary.rule">
    <field name="name">REINTEGRO RETENCI&#211;N</field>
    <field name="code">REINTRETFTE</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">523</field>
    <field name="sequence">126</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Reintegro Retencion")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Reintegro Retencion")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_96" model="hr.salary.rule">
    <field name="name">AUXILIO VALES DE ALIMENTACION</field>
    <field name="code">AUXVALALI</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara"></field>
    <field name="sequence">127</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'AUXVALALI':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'AUXVALALI':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_97" model="hr.salary.rule">
    <field name="name">AUXILIO MONETARIO EDUCACION</field>
    <field name="code">AUXEDU</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara">323</field>
    <field name="sequence">128</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="True"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'AUXEDU':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'AUXEDU':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_98" model="hr.salary.rule">
    <field name="name">AJUSTE AUXILIO MONETARIO</field>
    <field name="code">AJUSTEAUX</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara">329</field>
    <field name="sequence">129</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Auxilio Monetario")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Auxilio Monetario")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_99" model="hr.salary.rule">
    <field name="name">VALES DE ALIMENTACION GRAVADOS</field>
    <field name="code">VALALIG</field>
    <field name="category_id" ref="hr_salary_rule_category_AUXADI"/>
    <field name="code_sara">328</field>
    <field name="sequence">130</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'VALEALIMCF':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
#Basado en la ley Art 387 el estatuto tributario
salary  = 0
if categories.BASIC:
  salary  = salary  + categories.BASIC
if categories.AUS:
  salary  = salary  + categories.AUS
if salary  &gt; employee.obtain_value("UVT", payslip.date_to)*310:
  total = total
elif total &gt; employee.obtain_value("UVT", payslip.date_to)*41:
  total = total - employee.obtain_value("UVT", payslip.date_to)*41
else:
  total = 0
result= employee.round1(total)</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'VALEALIMCF':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
#Basado en la ley Art 387 el estatuto tributario
salary  = 0
if categories.BASIC:
  salary  = salary  + categories.BASIC
if categories.AUS:
  salary  = salary  + categories.AUS
if salary  &gt; employee.obtain_value("UVT", payslip.date_to)*310:
  total = total
elif total &gt; employee.obtain_value("UVT", payslip.date_to)*41:
  total = total - employee.obtain_value("UVT", payslip.date_to)*41
else:
  total = 0
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_100" model="hr.salary.rule">
    <field name="name">SUBSIDIO FAMILIAR EMPRESA</field>
    <field name="code">SUBFAM</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara">66</field>
    <field name="sequence">131</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Subsidio Familiar Empresa")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Subsidio Familiar Empresa")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_101" model="hr.salary.rule">
    <field name="name">BONIFICACION SALARIAL</field>
    <field name="code">BONIFSAL</field>
    <field name="category_id" ref="hr_salary_rule_category_BONIF"/>
    <field name="code_sara">205</field>
    <field name="sequence">132</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Bonificacion Salarial")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Bonificacion Salarial")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_103" model="hr.salary.rule">
    <field name="name">AUXILIO ALIMENTACI&#211;N</field>
    <field name="code">AUXALIMEN</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara">28</field>
    <field name="sequence">134</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Auxilio de Alimentaci&#243;n")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Auxilio de Alimentaci&#243;n")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_104" model="hr.salary.rule">
    <field name="name">BONIFICACION MERA LIBERALIDAD</field>
    <field name="code">BONIFML</field>
    <field name="category_id" ref="hr_salary_rule_category_BONIF"/>
    <field name="code_sara">202</field>
    <field name="sequence">135</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Bonificacion Mera Liberalidad")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Bonificacion Mera Liberalidad")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_105" model="hr.salary.rule">
    <field name="name">BONIFICACION NO HABITUAL</field>
    <field name="code">BONIFNHAB</field>
    <field name="category_id" ref="hr_salary_rule_category_BONIF"/>
    <field name="code_sara">25</field>
    <field name="sequence">136</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Bonificaci&#243;n No Habitual")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Bonificaci&#243;n No Habitual")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_106" model="hr.salary.rule">
    <field name="name">BONO POR PARTICIPACI&#211;N</field>
    <field name="code">BONPART</field>
    <field name="category_id" ref="hr_salary_rule_category_BONIF"/>
    <field name="code_sara">22</field>
    <field name="sequence">137</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Bono por Participacion")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Bono por Participacion")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_107" model="hr.salary.rule">
    <field name="name">COMPENSACION DE FLUJO DE CAJA</field>
    <field name="code">COMPFLUJO</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara">327</field>
    <field name="sequence">138</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Compensaci&#243;n Flujo de Caja")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Compensaci&#243;n Flujo de Caja")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_108" model="hr.salary.rule">
    <field name="name">BONO SALARIAL VIG</field>
    <field name="code">BONOSALVIG</field>
    <field name="category_id" ref="hr_salary_rule_category_BASIC"/>
    <field name="code_sara">225</field>
    <field name="sequence">139</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Bono Salarial Vig")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Bono Salarial Vig")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_109" model="hr.salary.rule">
    <field name="name">BONO PRIMA EXTRALEGAL NIVEL 1 Y 2</field>
    <field name="code">BONOPRIEXTN1Y2</field>
    <field name="category_id" ref="hr_salary_rule_category_BONIF"/>
    <field name="code_sara">35</field>
    <field name="sequence">142</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Bono Prima Extralegal Nivel 1 y 2")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Bono Prima Extralegal Nivel 1 y 2")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_110" model="hr.salary.rule">
    <field name="name">ANTICIPO</field>
    <field name="code">ANTICIPO</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara">134</field>
    <field name="sequence">143</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to and not payslip.pay_biannual:
  if categories.BASIC:
    total = total + categories.BASIC
  if categories.AUS:
    total = total + categories.AUS
  if categories.AUSINC:
    total = total + categories.AUSINC
  if categories.AUXTRANS:
    total = total + categories.AUXTRANS
result=(total)* 0.08333333</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to and not payslip.pay_biannual:
  if categories.BASIC:
    total = total + categories.BASIC
  if categories.AUS:
    total = total + categories.AUS
  if categories.AUSINC:
    total = total + categories.AUSINC
  if categories.AUXTRANS:
    total = total + categories.AUXTRANS
result=(total)* 0.08333333</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_111" model="hr.salary.rule">
    <field name="name">REINTEGRO CELULAR CLARO</field>
    <field name="code">CELCLARO</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara"></field>
    <field name="sequence">144</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Reintegro Celular Claro")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Reintegro Celular Claro")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_112" model="hr.salary.rule">
    <field name="name">AJUSTE FONDO DE SOLIDARIDAD</field>
    <field name="code">AJUSFSP</field>
    <field name="category_id" ref="hr_salary_rule_category_RETROAC"/>
    <field name="code_sara"></field>
    <field name="sequence">145</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Fondo de Solidaridad")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Fondo de Solidaridad")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_113" model="hr.salary.rule">
    <field name="name">AJUSTE VACACIONES HIST&#211;RICO</field>
    <field name="code">AJUSVAC</field>
    <field name="category_id" ref="hr_salary_rule_category_AUSAJUS"/>
    <field name="code_sara"></field>
    <field name="sequence">146</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ajuste vacaciones Hist&#243;rico")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ajuste vacaciones Hist&#243;rico")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_114" model="hr.salary.rule">
    <field name="name">AJUSTE SUBSIDIO DE TRANSPORTE APOYO SOSTENIMIENTO</field>
    <field name="code">AJUSAPSOST</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara"></field>
    <field name="sequence">147</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Subsidio de transporte Apoyo Sostenimiento")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Subsidio de transporte Apoyo Sostenimiento")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_115" model="hr.salary.rule">
    <field name="name">AUXILIO GASTO TRASLADO</field>
    <field name="code">AUXTRAS</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara"></field>
    <field name="sequence">148</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Auxilio Gasto Traslado")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Auxilio Gasto Traslado")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_116" model="hr.salary.rule">
    <field name="name">AJUSTE DE CESANTIAS</field>
    <field name="code">AJUSTCESCMSL</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara"></field>
    <field name="sequence">149</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ajuste de cesantias")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ajuste de cesantias")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_117" model="hr.salary.rule">
    <field name="name">AJUSTE INTERESES CESANTIAS</field>
    <field name="code">AJUSINTCMSL</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara"></field>
    <field name="sequence">150</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Intereses Cesantias")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Intereses Cesantias")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_118" model="hr.salary.rule">
    <field name="name">AJUSTE PRIMA LEGAL - CAMBIO SALARIO</field>
    <field name="code">AJUSPRLGCMSL</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara"></field>
    <field name="sequence">151</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Prima Legal - Cambio Salario")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Prima Legal - Cambio Salario")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_119" model="hr.salary.rule">
    <field name="name">AJUSTE AUXILIO MONETARIO RETROACTIVO</field>
    <field name="code">AJUSTEAUXMONRETRO</field>
    <field name="category_id" ref="hr_salary_rule_category_RETROAC"/>
    <field name="code_sara"></field>
    <field name="sequence">154</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Auxilio Monetario Retroactivo")
result = amount_total </field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Auxilio Monetario Retroactivo")
result = amount_total </field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_120" model="hr.salary.rule">
    <field name="name">REINTEGRO FESTIVAL EL DORADO</field>
    <field name="code">REINTFDORA</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara"></field>
    <field name="sequence">155</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Reintegro Festival el Dorado")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Reintegro Festival el Dorado")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_121" model="hr.salary.rule">
    <field name="name">SUMA CONCILIATORIA</field>
    <field name="code">SUMCONC</field>
    <field name="category_id" ref="hr_salary_rule_category_SUMACONC"/>
    <field name="code_sara">200</field>
    <field name="sequence">156</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="True"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Suma Conciliatoria")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Suma Conciliatoria")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_122" model="hr.salary.rule">
    <field name="name">AJUSTE PRIMA A&#209;O ANTERIOR</field>
    <field name="code">AJUSTPRIMAANTE</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara"></field>
    <field name="sequence">157</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Prima A&#241;o Anterior")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Prima A&#241;o Anterior")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_123" model="hr.salary.rule">
    <field name="name">DEVOLUCION DESCUENTO AFC</field>
    <field name="code">DVDESCAFC</field>
    <field name="category_id" ref="hr_salary_rule_category_RETROAC"/>
    <field name="code_sara"></field>
    <field name="sequence">159</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Devolucion descuento AFC")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Devolucion descuento AFC")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_124" model="hr.salary.rule">
    <field name="name">AJUSTE SUELDO DIVERSOS</field>
    <field name="code">AJUSSUELDIV</field>
    <field name="category_id" ref="hr_salary_rule_category_AJUSSAL"/>
    <field name="code_sara"></field>
    <field name="sequence">160</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Sueldo Diversos")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ajuste Sueldo Diversos")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_125" model="hr.salary.rule">
    <field name="name">LEY 1393</field>
    <field name="code">LEY1393</field>
    <field name="category_id" ref="hr_salary_rule_category_BASESEGU"/>
    <field name="code_sara">111</field>
    <field name="sequence">199</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">aux = 0
total=(categories.BASIC+categories.AUS+categories.AUSINC)
if total &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total=(categories.BASIC+categories.AUX+categories.BONIF+categories.AUS+categories.AUSINC+categories.AUXTRANS+categories.OTROS+categories.AJUSSAL+categories.AUSAJUS)*0.40
  aux=(categories.AUX+categories.BONIF+categories.OTROS)-total
if  aux&lt; 0:
  aux = 0
if  total&lt;0:
  aux=0
result=employee.round1(aux)</field>
    <field name="amount_python_compute">aux = 0
total=(categories.BASIC+categories.AUS+categories.AUSINC)
if total &lt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total=(categories.BASIC+categories.AUX+categories.BONIF+categories.AUS+categories.AUSINC+categories.AUXTRANS+categories.OTROS+categories.AJUSSAL+categories.AUSAJUS)*0.40
  aux=(categories.AUX+categories.BONIF+categories.OTROS)-total
if  aux&lt; 0:
  aux = 0
if  total&lt;0:
  aux=0
result=employee.round1(aux)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_126" model="hr.salary.rule">
    <field name="name">Bruto</field>
    <field name="code">GROSS</field>
    <field name="category_id" ref="hr_salary_rule_category_GROSS_one"/>
    <field name="code_sara"></field>
    <field name="sequence">200</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result = categories.BASIC + categories.ALW+ categories.AUX+ categories.OTROS+ categories.BONIF+ categories.AUXTRANS+categories.AUS+categories.PRESTAC+categories.PRESTAMOS+categories.AUSINC+categories.INDEM+categories.PRIMA+categories.RETROAC+categories.SUMACONC+categories.AUXADI+categories.VACACIONES+categories.APORTINS+categories.AUSAJUS+categories.AJUSSAL</field>
    <field name="amount_python_compute">result = categories.BASIC + categories.ALW+ categories.AUX+ categories.OTROS+ categories.BONIF+ categories.AUXTRANS+categories.AUS+categories.PRESTAC+categories.PRESTAMOS+categories.AUSINC+categories.INDEM+categories.PRIMA+categories.RETROAC+categories.SUMACONC+categories.AUXADI+categories.VACACIONES+categories.APORTINS+categories.AUSAJUS+categories.AJUSSAL</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_127" model="hr.salary.rule">
    <field name="name">APORTE PENSI&#211;N</field>
    <field name="code">AFP</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">501</field>
    <field name="sequence">201</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">categ</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ">BASIC,AUS,AUSINC,BASESEGU</field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">BASIC</field>
    <field name="amount_percentage">-4</field>
    <field name="condition_python">total = 0
if categories.BASIC:
  total = total + categories.BASIC
if categories.AUS:
  total = total + categories.AUS
if categories.AUSINC:
  total = total + categories.AUSINC
if categories.AJUSSAL:
    total = total + categories.AJUSSAL
if categories.AUSAJUS:
    total = total + categories.AUSAJUS
if categories.BASESEGU:
  total = total + categories.BASESEGU
if total &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
   total =employee.obtain_value("Salario Minimo", payslip.date_to)*25
result=employee.round100(total* 0.04 )*-1</field>
    <field name="amount_python_compute">total = 0
if categories.BASIC:
  total = total + categories.BASIC
if categories.AUS:
  total = total + categories.AUS
if categories.AUSINC:
  total = total + categories.AUSINC
if categories.AJUSSAL:
    total = total + categories.AJUSSAL
if categories.AUSAJUS:
    total = total + categories.AUSAJUS
if categories.BASESEGU:
  total = total + categories.BASESEGU
if total &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
   total =employee.obtain_value("Salario Minimo", payslip.date_to)*25
result=employee.round100(total* 0.04 )*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_128" model="hr.salary.rule">
    <field name="name">APORTE PENSI&#211;N(si)</field>
    <field name="code">AFP</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">501</field>
    <field name="sequence">202</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">categ</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ">BASIC,AUS,AUSINC,BASESEGU</field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">SALINTE*0.70</field>
    <field name="amount_percentage">-4</field>
    <field name="condition_python">total = 0
if categories.BASIC:
  total = total + categories.BASIC*0.70
if categories.AUS:
  total = total + categories.AUS*0.70
if categories.AUSINC:
  total = total + categories.AUSINC*0.70
if categories.AJUSSAL:
    total = total + categories.AJUSSAL*0.70
if categories.AUSAJUS:
    total = total + categories.AUSAJUS*0.70
if categories.BASESEGU:
  total = total + categories.BASESEGU*0.70
if total &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = employee.obtain_value("Salario Minimo", payslip.date_to)*25
result=employee.round100(total* 0.04 )</field>
    <field name="amount_python_compute">total = 0
if categories.BASIC:
  total = total + categories.BASIC*0.70
if categories.AUS:
  total = total + categories.AUS*0.70
if categories.AUSINC:
  total = total + categories.AUSINC*0.70
if categories.AJUSSAL:
    total = total + categories.AJUSSAL*0.70
if categories.AUSAJUS:
    total = total + categories.AUSAJUS*0.70
if categories.BASESEGU:
  total = total + categories.BASESEGU*0.70
if total &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = employee.obtain_value("Salario Minimo", payslip.date_to)*25
result=employee.round100(total* 0.04 )* -1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_129" model="hr.salary.rule">
    <field name="name">APORTE SALUD</field>
    <field name="code">EPS</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">500</field>
    <field name="sequence">203</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="True"/>
    <field name="asigned_base">categ</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ">BASIC,AUS,AUSINC,BASESEGU</field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">BASIC</field>
    <field name="amount_percentage">-4</field>
    <field name="condition_python">total = 0
salmin = employee.obtain_value("Salario Minimo", payslip.date_to)
salmin25 = salmin*25
if categories.BASIC:
  total = total + categories.BASIC
if categories.AUS:
  total = total + categories.AUS
if categories.AUSINC:
  total = total + categories.AUSINC
if categories.AJUSSAL:
    total = total + categories.AJUSSAL
if categories.AUSAJUS:
    total = total + categories.AUSAJUS
if categories.BASESEGU:
  total = total + categories.BASESEGU
if total &gt; salmin25:
  total = salmin25
result=employee.round100(total* 0.04 )</field>
    <field name="amount_python_compute">total = 0
salmin = employee.obtain_value("Salario Minimo", payslip.date_to)
salmin25 = salmin*25
if categories.BASIC:
  total = total + categories.BASIC
if categories.AUS:
  total = total + categories.AUS
if categories.AUSINC:
  total = total + categories.AUSINC
if categories.AJUSSAL:
    total = total + categories.AJUSSAL
if categories.AUSAJUS:
    total = total + categories.AUSAJUS
if categories.BASESEGU:
  total = total + categories.BASESEGU
if total &gt; salmin25:
  total = salmin25
result=employee.round100(total* 0.04 )* -1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_130" model="hr.salary.rule">
    <field name="name">APORTE SALUD(si)</field>
    <field name="code">EPS</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">500</field>
    <field name="sequence">204</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="True"/>
    <field name="asigned_base">categ</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ">BASIC,AUS,AUSINC,BASESEGU</field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">SALINTE*0.70</field>
    <field name="amount_percentage">-4</field>
    <field name="condition_python">total = 0
if categories.BASIC:
  total = total + categories.BASIC*0.70
if categories.AUS:
  total = total + categories.AUS*0.70
if categories.AUSINC:
  total = total + categories.AUSINC*0.70
if categories.AJUSSAL:
    total = total + categories.AJUSSAL*0.70
if categories.AUSAJUS:
    total = total + categories.AUSAJUS*0.70
if categories.BASESEGU:
  total = total + categories.BASESEGU*0.70
if total &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = employee.obtain_value("Salario Minimo", payslip.date_to)*25
result=employee.round100(total* 0.04 )</field>
    <field name="amount_python_compute">total = 0
if categories.BASIC:
  total = total + categories.BASIC*0.70
if categories.AUS:
  total = total + categories.AUS*0.70
if categories.AUSINC:
  total = total + categories.AUSINC*0.70
if categories.AJUSSAL:
    total = total + categories.AJUSSAL*0.70
if categories.AUSAJUS:
    total = total + categories.AUSAJUS*0.70
if categories.BASESEGU:
  total = total + categories.BASESEGU*0.70
if total &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = employee.obtain_value("Salario Minimo", payslip.date_to)*25
result=employee.round100(total* 0.04 )* -1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_131" model="hr.salary.rule">
    <field name="name">FONDO DE SOLIDARIDAD</field>
    <field name="code">FSP</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">502</field>
    <field name="sequence">205</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">BASIC</field>
    <field name="amount_percentage">-1</field>
    <field name="condition_python">deduction = 0
base_fs1 = categories.BASIC +categories.AUS+categories.AUSINC+ categories.BASESEGU+categories.AJUSSAL+categories.AUSAJUS
salmin = employee.obtain_value("Salario Minimo", payslip.date_to)
if base_fs1 &lt; 0:
  base_fs = contract.fix_wage_amount
else:
  base_fs = base_fs1
if base_fs &gt; salmin*25:
  base_fs = salmin*25
if base_fs &gt; salmin*4 and base_fs &lt;= salmin*16:
  deduction = base_fs*0.01
if base_fs &gt; salmin*16 and base_fs &lt;= salmin*17:
  deduction = base_fs*0.012
if base_fs &gt; salmin*17 and base_fs &lt;= salmin*18:
  deduction = base_fs*0.014
if base_fs &gt; salmin*18 and base_fs &lt;= salmin*19:
  deduction = base_fs*0.016
if base_fs &gt; salmin*19 and base_fs &lt;= salmin*20:
  deduction = base_fs*0.018
if base_fs &gt; salmin*20:
  deduction = base_fs*0.02
if base_fs1 &lt; 0:
  deduction = (deduction/30)*(worked_days.WORK100.number_of_days)
result =employee.round100(deduction)</field>
    <field name="amount_python_compute">deduction = 0
base_fs1 = categories.BASIC +categories.AUS+categories.AUSINC+ categories.BASESEGU+categories.AJUSSAL+categories.AUSAJUS
salmin = employee.obtain_value("Salario Minimo", payslip.date_to)
if base_fs1 &lt; 0:
  base_fs = contract.fix_wage_amount
else:
  base_fs = base_fs1
if base_fs &gt; salmin*25:
  base_fs = salmin*25
if base_fs &gt; salmin*4 and base_fs &lt;= salmin*16:
  deduction = base_fs*0.01
if base_fs &gt; salmin*16 and base_fs &lt;= salmin*17:
  deduction = base_fs*0.012
if base_fs &gt; salmin*17 and base_fs &lt;= salmin*18:
  deduction = base_fs*0.014
if base_fs &gt; salmin*18 and base_fs &lt;= salmin*19:
  deduction = base_fs*0.016
if base_fs &gt; salmin*19 and base_fs &lt;= salmin*20:
  deduction = base_fs*0.018
if base_fs &gt; salmin*20:
  deduction = base_fs*0.02
if base_fs1 &lt; 0:
  deduction = (deduction/30)*(worked_days.WORK100.number_of_days)
result =employee.round100(deduction)*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_132" model="hr.salary.rule">
    <field name="name">FONDO DE SOLIDARIDAD SI</field>
    <field name="code">FSP</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">502</field>
    <field name="sequence">206</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">SALINTE*0.70</field>
    <field name="amount_percentage">-1</field>
    <field name="condition_python">deduction = 0
base_fs1 = ((categories.BASIC +categories.AUS+categories.AUSINC+ categories.BASESEGU+categories.AJUSSAL+categories.AUSAJUS)* 0.70)
salmin = employee.obtain_value("Salario Minimo", payslip.date_to)
if base_fs1 &lt; 0:
  base_fs = (contract.fix_wage_amount)*0.70
else:
  base_fs = base_fs1
if base_fs &gt; salmin*25:
  base_fs = salmin*25
if base_fs &gt; salmin*4 and base_fs &lt;= salmin*16:
  deduction = base_fs*0.01
if base_fs &gt; salmin*16 and base_fs &lt;= salmin*17:
  deduction = base_fs*0.012
if base_fs &gt; salmin*17 and base_fs &lt;= salmin*18:
  deduction = base_fs*0.014
if base_fs &gt; salmin*18 and base_fs &lt;= salmin*19:
  deduction = base_fs*0.016
if base_fs &gt; salmin*19 and base_fs &lt;= salmin*20:
  deduction = base_fs*0.018
if base_fs &gt; salmin*20:
  deduction = base_fs*0.02
if base_fs1 &lt; 0:
  deduction = (deduction/30)*(worked_days.WORK100.number_of_days)
result =employee.round100(deduction)</field>
    <field name="amount_python_compute">deduction = 0
base_fs1 = ((categories.BASIC +categories.AUS+categories.AUSINC+ categories.BASESEGU+categories.AJUSSAL+categories.AUSAJUS)* 0.70)
salmin = employee.obtain_value("Salario Minimo", payslip.date_to)
if base_fs1 &lt; 0:
  base_fs = (contract.fix_wage_amount)*0.70
else:
  base_fs = base_fs1
if base_fs &gt; salmin*25:
  base_fs = salmin*25
if base_fs &gt; salmin*4 and base_fs &lt;= salmin*16:
  deduction = base_fs*0.01
if base_fs &gt; salmin*16 and base_fs &lt;= salmin*17:
  deduction = base_fs*0.012
if base_fs &gt; salmin*17 and base_fs &lt;= salmin*18:
  deduction = base_fs*0.014
if base_fs &gt; salmin*18 and base_fs &lt;= salmin*19:
  deduction = base_fs*0.016
if base_fs &gt; salmin*19 and base_fs &lt;= salmin*20:
  deduction = base_fs*0.018
if base_fs &gt; salmin*20:
  deduction = base_fs*0.02
if base_fs1 &lt; 0:
  deduction = (deduction/30)*(worked_days.WORK100.number_of_days)
result =employee.round100(deduction)*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_133" model="hr.salary.rule">
    <field name="name">RETENCION EN LA FUENTE SALARIOS</field>
    <field name="code">RETEFTESAL</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">520</field>
    <field name="sequence">207</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result=employee.round1000(payslip.total_retention_income * -1)</field>
    <field name="amount_python_compute">result=employee.round1000(payslip.total_retention_income * -1)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_134" model="hr.salary.rule">
    <field name="name">RTE FTE SUMA CONCILIATORIA</field>
    <field name="code">RTEFTESUMCONC</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara"></field>
    <field name="sequence">208</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = 0
employee.create_iw(payslip.date_from, payslip)
if payslip.recalc_line_id:
  amount_total = payslip.recalc_line_id.total_retention_income
result =employee.round100((amount_total/100)*(-categories.SUMACONC*0.75))</field>
    <field name="amount_python_compute">amount_total = 0
employee.create_iw(payslip.date_from, payslip)
if payslip.recalc_line_id:
  amount_total = payslip.recalc_line_id.total_retention_income
result =employee.round100((amount_total/100)*(-categories.SUMACONC*0.75))</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_135" model="hr.salary.rule">
    <field name="name">APORTE AFC</field>
    <field name="code">AFC</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">512</field>
    <field name="sequence">221</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Aporte AFC")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Aporte AFC")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_136" model="hr.salary.rule">
    <field name="name">APORTE VOLUNTARIO EN PENSION</field>
    <field name="code">APVOLPEN</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">510</field>
    <field name="sequence">222</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Aporte Voluntario de Pension")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Aporte Voluntario de Pension")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_137" model="hr.salary.rule">
    <field name="name">POLIZA MEDICINA PREPAGADA COLSANITAS</field>
    <field name="code">MEDPCS</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">650</field>
    <field name="sequence">223</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "P&#243;liza Medicina Prepagada Colsanitas")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "P&#243;liza Medicina Prepagada Colsanitas")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_138" model="hr.salary.rule">
    <field name="name">POLIZA MEDICINA PREPAGADA COLMEDICA</field>
    <field name="code">MEDPCOL</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">651</field>
    <field name="sequence">224</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "P&#243;liza Medicina Prepagada Colmedica")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "P&#243;liza Medicina Prepagada Colmedica")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_139" model="hr.salary.rule">
    <field name="name">SUSPENSION</field>
    <field name="code">SUSP</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">527</field>
    <field name="sequence">225</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Suspension</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Suspension:
  total = (worked_days.Suspension.number_of_days )*(contract.fix_wage_amount / 30)
result = total</field>
    <field name="amount_python_compute">total = 0
if worked_days.Suspension:
  total = (worked_days.Suspension.number_of_days )*(contract.fix_wage_amount / 30)
result = total*-0</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_140" model="hr.salary.rule">
    <field name="name">AHORRO ASOCIADO FONDOEMPLEADO</field>
    <field name="code">AHOASO</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">909</field>
    <field name="sequence">226</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Ahorro Asociado Fondoempleado")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Ahorro Asociado Fondoempleado")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_141" model="hr.salary.rule">
    <field name="name">DCTO VALES DE ALIMENTACION CF</field>
    <field name="code">DCTOVALALICF</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">657</field>
    <field name="sequence">227</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">VALESALIM</field>
    <field name="amount_percentage">-100</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'VALEALIMCF':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= total</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'VALEALIMCF':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= total*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_142" model="hr.salary.rule">
    <field name="name">DESC DIVERSOS VALOR</field>
    <field name="code">DESCDI</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">807</field>
    <field name="sequence">228</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Diversos")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Diversos")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_143" model="hr.salary.rule">
    <field name="name">DESC CAPACITACION</field>
    <field name="code">DESCAP</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">812</field>
    <field name="sequence">229</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuentos por capacitaci&#243;n")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuentos por capacitaci&#243;n")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_144" model="hr.salary.rule">
    <field name="name">DESC TARJETA DE CREDITO CORPORATIVA</field>
    <field name="code">DESTC</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">813</field>
    <field name="sequence">230</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Tarjeta de Credito Corporativa")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Tarjeta de Credito Corporativa")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_145" model="hr.salary.rule">
    <field name="name">DESCUENTO PERDIDA DE CARNET</field>
    <field name="code">DESPC</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">815</field>
    <field name="sequence">231</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Perdida Carnet")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Perdida Carnet")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_146" model="hr.salary.rule">
    <field name="name">DESCUENTO ADEN</field>
    <field name="code">DESADEN</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">530</field>
    <field name="sequence">232</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Aden")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Aden")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_147" model="hr.salary.rule">
    <field name="name">DESCUENTO CELULAR CLARO</field>
    <field name="code">DESCEL</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">602</field>
    <field name="sequence">233</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Celular Claro")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Celular Claro")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_148" model="hr.salary.rule">
    <field name="name">DESCUENTO CELULAR MOVISTAR</field>
    <field name="code">DESCELM</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">603</field>
    <field name="sequence">234</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Celular Movistar")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Celular Movistar")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_149" model="hr.salary.rule">
    <field name="name">DESC DIVERSOS ADICIONALES</field>
    <field name="code">DESCDIADIC</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">816</field>
    <field name="sequence">235</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Desc Diversos Adicionales")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Desc Diversos Adicionales")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_150" model="hr.salary.rule">
    <field name="name">DESC RESTAURANTE</field>
    <field name="code">DTORESTAURANTE</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">811</field>
    <field name="sequence">236</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Restaurante")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Restaurante")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_151" model="hr.salary.rule">
    <field name="name">DESCUENTO FONDOEMPLEADO</field>
    <field name="code">FONDOEMPLEADO</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">805</field>
    <field name="sequence">237</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Fondoempleado")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Fondoempleado")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_152" model="hr.salary.rule">
    <field name="name">CARTERA ASOCIADO FONDOEMPLEADO</field>
    <field name="code">CARTASO</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">910</field>
    <field name="sequence">238</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Cartera Asociado Fondoempleado")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Cartera Asociado Fondoempleado")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_153" model="hr.salary.rule">
    <field name="name">DESC ANTICIPO SALARIO</field>
    <field name="code">DESCANTSAL</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">806</field>
    <field name="sequence">239</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Dcto Anticipo Salario")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Dcto Anticipo Salario")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_154" model="hr.salary.rule">
    <field name="name">EMBARGO JUDICIAL</field>
    <field name="code">EMBARGO</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">703</field>
    <field name="sequence">240</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Embargos")
result = amount_total </field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Embargos")
result = amount_total </field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_155" model="hr.salary.rule">
    <field name="name">DCTO APORTE VOLUNTARIO ADICIONAL CF</field>
    <field name="code">DTOAPRVOL</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">655</field>
    <field name="sequence">241</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">APORVOLADICF</field>
    <field name="amount_percentage">-100</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'APORVOLADICF':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= total</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'APORVOLADICF':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= total*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_156" model="hr.salary.rule">
    <field name="name">RTE FTE INDEMNIZACION/BONIFICACION</field>
    <field name="code">RETEFTEINDBON</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">521</field>
    <field name="sequence">242</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">deduction=0
amount =contract.wage
if amount &gt; employee.obtain_value("UVT", payslip.date_to)*204:
  deduction = (categories.INDEM*0.75)*0.20
result =employee.round1000(deduction)</field>
    <field name="amount_python_compute">deduction=0
amount =contract.wage
if amount &gt; employee.obtain_value("UVT", payslip.date_to)*204:
  deduction = (categories.INDEM*0.75)*0.20
result =employee.round1000(deduction)*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_157" model="hr.salary.rule">
    <field name="name">DCTO APORTE INSTITUCIONAL EMPRESA</field>
    <field name="code">DTOINTEMP</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">656</field>
    <field name="sequence">243</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">APORINSEMPRE</field>
    <field name="amount_percentage">-100</field>
    <field name="condition_python">Amount = 0
total = 0
base_fs = (contract.flex_wage_amount)
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= total</field>
    <field name="amount_python_compute">Amount = 0
total = 0
base_fs = (contract.flex_wage_amount)
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= total*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_158" model="hr.salary.rule">
    <field name="name">DCTO APORTE INSTITUCIONAL EMPLEADO</field>
    <field name="code">DTOINTEMPLE</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">658</field>
    <field name="sequence">244</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">APORINSEMPLE</field>
    <field name="amount_percentage">-100</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'APORINSEMPLE':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= total</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'APORINSEMPLE':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= total*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_159" model="hr.salary.rule">
    <field name="name">DCTO APORTE INSTITUCIONAL PLUS</field>
    <field name="code">DTOAPORPLUS</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">659</field>
    <field name="sequence">245</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">APORINSPLUS</field>
    <field name="amount_percentage">-100</field>
    <field name="condition_python">amount = 0
total = 0
if not contract.contribution_pay:
  base_fs = (contract.flex_wage_amount)
  if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
    amount = (base_fs*0.1766666)
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= total</field>
    <field name="amount_python_compute">amount = 0
total = 0
if not contract.contribution_pay:
  base_fs = (contract.flex_wage_amount)
  if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
    amount = (base_fs*0.1766666)
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= total*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_160" model="hr.salary.rule">
    <field name="name">DESCUENTO TAXI</field>
    <field name="code">DESTAXI</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">814</field>
    <field name="sequence">246</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Taxi")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Taxi")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_161" model="hr.salary.rule">
    <field name="name">DONACIONES</field>
    <field name="code">DONACION</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">804-809</field>
    <field name="sequence">247</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Donaciones")
result = amount_total </field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Donaciones")
result = amount_total </field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_162" model="hr.salary.rule">
    <field name="name">DCTO APORTE INSTITUCIONAL EMPRESA (SI)</field>
    <field name="code">DTOINTEMPSI</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">656</field>
    <field name="sequence">248</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">Amount = 0
total = 0
base_fs = (contract.flex_wage_amount*0.70)
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= total</field>
    <field name="amount_python_compute">Amount = 0
total = 0
base_fs = (contract.flex_wage_amount*0.70)
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= total*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_163" model="hr.salary.rule">
    <field name="name">MAYOR VALOR PAGADO</field>
    <field name="code">MAYORVALPAG</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">808</field>
    <field name="sequence">249</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Mayor valor pagado")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Mayor valor pagado")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_164" model="hr.salary.rule">
    <field name="name">DESCUENTO EQUIPOS TI</field>
    <field name="code">DESCEQUTI</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">911</field>
    <field name="sequence">250</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Equipos TI")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Equipos TI")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_165" model="hr.salary.rule">
    <field name="name">RTE FTE PRIMA</field>
    <field name="code">RTEFTEPRI</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara"></field>
    <field name="sequence">250</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">deduction = 0
valuvt = employee.obtain_value("UVT", payslip.date_to)
base_fs=0
if employee.retention_method_id.name == '1':
  base_fs = categories.PRIMA
base_fs=base_fs*0.75
if base_fs &gt; valuvt*87 and base_fs &lt;= valuvt*145:
  deduction = (base_fs-valuvt*87)*0.19
if base_fs &gt; valuvt*145 and base_fs &lt;= valuvt*335:
  deduction = ((base_fs-valuvt*145)*0.28)+valuvt*11
if base_fs &gt; (valuvt*335+1) and base_fs &lt;= valuvt*640:
  deduction = ((base_fs-valuvt*335)*0.33)+valuvt*64
if base_fs &gt; valuvt*640 and base_fs &lt;= valuvt*945:
  deduction =((base_fs-valuvt*640)*0.35)+valuvt*165
if base_fs &gt; valuvt*945 and base_fs &lt;= valuvt*2300:
  deduction = ((base_fs-945)*0.37)+valuvt*272
if base_fs &gt; valuvt*2300:
  deduction = ((base_fs-valuvt*2300)*0.39)+773
result = employee.round1(deduction)</field>
    <field name="amount_python_compute">deduction = 0
valuvt = employee.obtain_value("UVT", payslip.date_to)
base_fs=0
if employee.retention_method_id.name == '1':
  base_fs = categories.PRIMA
base_fs=base_fs*0.75
if base_fs &gt; valuvt*87 and base_fs &lt;= valuvt*145:
  deduction = (base_fs-valuvt*87)*0.19
if base_fs &gt; valuvt*145 and base_fs &lt;= valuvt*335:
  deduction = ((base_fs-valuvt*145)*0.28)+valuvt*11
if base_fs &gt; (valuvt*335+1) and base_fs &lt;= valuvt*640:
  deduction = ((base_fs-valuvt*335)*0.33)+valuvt*64
if base_fs &gt; valuvt*640 and base_fs &lt;= valuvt*945:
  deduction =((base_fs-valuvt*640)*0.35)+valuvt*165
if base_fs &gt; valuvt*945 and base_fs &lt;= valuvt*2300:
  deduction = ((base_fs-945)*0.37)+valuvt*272
if base_fs &gt; valuvt*2300:
  deduction = ((base_fs-valuvt*2300)*0.39)+773
result = employee.round1(deduction)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_166" model="hr.salary.rule">
    <field name="name">UPC ADICIONAL</field>
    <field name="code">UPCADICIONAL</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">503</field>
    <field name="sequence">251</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Upc Adicional")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Upc Adicional")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_167" model="hr.salary.rule">
    <field name="name">PR&#201;STAMO EMPLEADO</field>
    <field name="code">PRESEMPLEADO</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">600</field>
    <field name="sequence">252</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Pr&#233;stamo Empleado")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Pr&#233;stamo Empleado")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_168" model="hr.salary.rule">
    <field name="name">DESCUENTO ASESORIA EMPLEADOS</field>
    <field name="code">DESASEEMPL</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">905</field>
    <field name="sequence">253</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Asesoria Empleados")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Asesoria Empleados")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_169" model="hr.salary.rule">
    <field name="name">LEGALIZACION ANTICIPO OTROS</field>
    <field name="code">LEGALANTOTR</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">906</field>
    <field name="sequence">254</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Legalizacion Anticipo Otros")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Legalizacion Anticipo Otros")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_170" model="hr.salary.rule">
    <field name="name">DESCUENTO YOUNG LIONS</field>
    <field name="code">DESCYOUNG</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">904</field>
    <field name="sequence">255</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Young Lions")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Young Lions")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_171" model="hr.salary.rule">
    <field name="name">CLASES DE INGLES</field>
    <field name="code">CLASINGL</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">908</field>
    <field name="sequence">256</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Clases Ingles")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Clases Ingles")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_172" model="hr.salary.rule">
    <field name="name">LICENCIA NO REMUNERADA</field>
    <field name="code">LICNREM</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">526</field>
    <field name="sequence">257</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">Licencia_no_Remunerada</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if worked_days.Licencia_no_Remunerada:
  total = (worked_days.Licencia_no_Remunerada.number_of_days )*(contract.fix_wage_amount / 30)
result = total*-0</field>
    <field name="amount_python_compute">total = 0
if worked_days.Licencia_no_Remunerada:
  total = (worked_days.Licencia_no_Remunerada.number_of_days )*(contract.fix_wage_amount / 30)
result = total*-0</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_173" model="hr.salary.rule">
    <field name="name">DESCUENTO FESTIVAL EL DORADO</field>
    <field name="code">DESCFDORA</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">901</field>
    <field name="sequence">258</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Festival El Dorado")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Festival El Dorado")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_174" model="hr.salary.rule">
    <field name="name">DESCUENTO FESTIVAL CARTAGENA</field>
    <field name="code">DESCFCART</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">902</field>
    <field name="sequence">259</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Festival Cartagena")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Festival Cartagena")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_175" model="hr.salary.rule">
    <field name="name">DESCUENTO FESTIVAL 4G</field>
    <field name="code">DESCF4G</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara"></field>
    <field name="sequence">260</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Festival 4G")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Festival 4G")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_176" model="hr.salary.rule">
    <field name="name">DESCUENTO EXMA</field>
    <field name="code">DESCEXMA</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">904</field>
    <field name="sequence">261</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Exma")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Exma")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_177" model="hr.salary.rule">
    <field name="name">DESCUENTO AJUSTE AUXILIO MONETARIO</field>
    <field name="code">DESCAJUSTEAUX</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">329</field>
    <field name="sequence">262</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Ajuste Auxilio Monetario")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Ajuste Auxilio Monetario")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_178" model="hr.salary.rule">
    <field name="name">DCTO APORTE INSTITUCIONAL EMPRESA DI</field>
    <field name="code">DTOINTEMPDI</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">656</field>
    <field name="sequence">263</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">APORINSEMPRE</field>
    <field name="amount_percentage">-100</field>
    <field name="condition_python">amount = 0
total = 0
base_fs = contract.fix_wage_amount
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (7988007*0.075)-(base_fs*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
if base_fs &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = base_fs
result= total</field>
    <field name="amount_python_compute">amount = 0
total = 0
base_fs = contract.fix_wage_amount
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (7988007*0.075)-(base_fs*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
if base_fs &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = base_fs*0
result= total*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_179" model="hr.salary.rule">
    <field name="name">DCTO APORTE INSTITUCIONAL EMPRESA HB</field>
    <field name="code">DTOINTEMPHB</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">656</field>
    <field name="sequence">264</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">APORINSEMPRE</field>
    <field name="amount_percentage">-100</field>
    <field name="condition_python">amount = 0
total = 0
base_fs = contract.flex_wage_amount
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.77565*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
if base_fs &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = base_fs
result= total</field>
    <field name="amount_python_compute">amount = 0
total = 0
base_fs = contract.flex_wage_amount
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.77565*0.075)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
if base_fs &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = base_fs*0
result= total*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_180" model="hr.salary.rule">
    <field name="name">DCTO APORTE INSTITUCIONAL PLUS HB</field>
    <field name="code">DTOINTPLUSHB</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">659</field>
    <field name="sequence">265</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">APORINSEMPRE</field>
    <field name="amount_percentage">-100</field>
    <field name="condition_python">amount = 0
total = 0
base_fs = contract.flex_wage_amount
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.77565*0.176666)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
if base_fs &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = base_fs
result= total</field>
    <field name="amount_python_compute">amount = 0
total = 0
base_fs = contract.flex_wage_amount
if base_fs &gt; 0 and base_fs &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  amount = (base_fs*0.77565*0.176666)
  total = (worked_days.WORK100.number_of_days) *(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
if base_fs &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = base_fs*0
result= total*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_181" model="hr.salary.rule">
    <field name="name">DESCUENTO AJUSTE SALARIO</field>
    <field name="code">DESCAJUSTESUEL</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">1,2</field>
    <field name="sequence">266</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Ajuste Salario")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Ajuste Salario")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_182" model="hr.salary.rule">
    <field name="name">COMPRA EQUIPO CELULAR</field>
    <field name="code">CPRAEQUCEL</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">907</field>
    <field name="sequence">267</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Compra Equipo Celular")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Compra Equipo Celular")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_183" model="hr.salary.rule">
    <field name="name">DESCUENTO ANTICIPO GASTOS DE TRASLADO</field>
    <field name="code">DESCANPTRAS</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara"></field>
    <field name="sequence">268</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Descuento Anticipo Gasto de Traslado")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Descuento Anticipo Gasto de Traslado")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_184" model="hr.salary.rule">
    <field name="name">DESCUENTO AJUSTE FONDO DE SOLIDARIDAD</field>
    <field name="code">DESCAJUSFSP</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara"></field>
    <field name="sequence">269</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "        Descuento Ajuste Fondo de Solidaridad")
result = amount_total</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "        Descuento Ajuste Fondo de Solidaridad")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_185" model="hr.salary.rule">
    <field name="name">DESC ANTICIPO PRIMA LEGAL</field>
    <field name="code">DESCANTIC</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara">707</field>
    <field name="sequence">270</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">primpag=0
if payslip.date_to and payslip.pay_biannual:
  primpag=employee.get_acumulate_month_before(payslip.date_to, "ACUM_PRIMA_PAGADA") 
result=primpag</field>
    <field name="amount_python_compute">primpag=0
if payslip.date_to and payslip.pay_biannual:
  primpag=employee.get_acumulate_month_before(payslip.date_to, "ACUM_PRIMA_PAGADA") 
result=primpag*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_186" model="hr.salary.rule">
    <field name="name">RETENCION EN LA FUENTE  POR INDEMNIZACION OPCIONAL</field>
    <field name="code">RETINDEMOPCI</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara"></field>
    <field name="sequence">272</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">deduction = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'RETINDEMOPCI':
        amount =contract.wage
        if amount &gt; employee.obtain_value("UVT", payslip.date_to)*1:
         deduction = (categories.INDEM*0.75)*0.20
result = deduction</field>
    <field name="amount_python_compute">deduction = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'RETINDEMOPCI':
        amount =contract.wage
        if amount &gt; employee.obtain_value("UVT", payslip.date_to)*1:
         deduction = (categories.INDEM*0.75)*0.20
result = employee.round100(deduction*-1)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_187" model="hr.salary.rule">
    <field name="name">TOTAL DEDUCCIONES</field>
    <field name="code">TOTALDED</field>
    <field name="category_id" ref="hr_salary_rule_category_TOTALDED"/>
    <field name="code_sara"></field>
    <field name="sequence">300</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result = categories.DED</field>
    <field name="amount_python_compute">result = categories.DED</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_188" model="hr.salary.rule">
    <field name="name">SALARIO NETO</field>
    <field name="code">NET</field>
    <field name="category_id" ref="hr_salary_rule_category_NET_one"/>
    <field name="code_sara"></field>
    <field name="sequence">350</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">none</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result = categories.GROSS + categories.TOTALDED </field>
    <field name="amount_python_compute">result = categories.GROSS + categories.TOTALDED </field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_189" model="hr.salary.rule">
    <field name="name">APORTE PENSI&#211;N EMPRESA</field>
    <field name="code">PENSIONEMPRESA</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara">501</field>
    <field name="sequence">500</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if categories.BASIC:
  total = total + categories.BASIC
if categories.AUS:
  total = total + categories.AUS
if categories.AUSINC:
  total = total + categories.AUSINC
if categories.AJUSSAL:
    total = total + categories.AJUSSAL
if categories.AUSAJUS:
    total = total + categories.AUSAJUS
if categories.BASESEGU:
  total = total + categories.BASESEGU
if total &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = employee.obtain_value("Salario Minimo", payslip.date_to)*25
if total&lt; 0:
  total= 0
days_off =0
if worked_days.Licencia_no_Remunerada:
  days_off = worked_days.Licencia_no_Remunerada.number_of_days
value_add = ((contract.fix_wage_amount/ 30)*days_off)*0.16
result=employee.round100(total* 0.12)+value_add</field>
    <field name="amount_python_compute">total = 0
if categories.BASIC:
  total = total + categories.BASIC
if categories.AUS:
  total = total + categories.AUS
if categories.AUSINC:
  total = total + categories.AUSINC
if categories.AJUSSAL:
    total = total + categories.AJUSSAL
if categories.AUSAJUS:
    total = total + categories.AUSAJUS
if categories.BASESEGU:
  total = total + categories.BASESEGU
if total &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = employee.obtain_value("Salario Minimo", payslip.date_to)*25
if total&lt; 0:
  total= 0
days_off =0
if worked_days.Licencia_no_Remunerada:
  days_off = worked_days.Licencia_no_Remunerada.number_of_days
value_add = ((contract.fix_wage_amount/ 30)*days_off)*0.16
result=employee.round100(total* 0.12)+value_add</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_190" model="hr.salary.rule">
    <field name="name">APORTE PENSI&#211;N EMPRESA (SI)</field>
    <field name="code">PENSIONEMPRESA</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara">501</field>
    <field name="sequence">501</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">SALINTE*0.70</field>
    <field name="amount_percentage">12</field>
    <field name="condition_python">total = 0
if categories.BASIC:
  total = total + categories.BASIC*0.70
if categories.AUS:
  total = total + categories.AUS*0.70
if categories.AUSINC:
  total = total + categories.AUSINC*0.70
if categories.AJUSSAL:
    total = total + categories.AJUSSAL*0.70
if categories.AUSAJUS:
    total = total + categories.AUSAJUS*0.70
if categories.BASESEGU:
  total = total + categories.BASESEGU*0.70
if total &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = employee.obtain_value("Salario Minimo", payslip.date_to)*25
if total&lt; 0:
  total= 0
days_off =0
if worked_days.Licencia_no_Remunerada:
  days_off = worked_days.Licencia_no_Remunerada.number_of_days
value_add = ((contract.fix_wage_amount/ 30)*days_off)*0.16
result=employee.round100(total* 0.12)+value_add</field>
    <field name="amount_python_compute">total = 0
if categories.BASIC:
  total = total + categories.BASIC*0.70
if categories.AUS:
  total = total + categories.AUS*0.70
if categories.AUSINC:
  total = total + categories.AUSINC*0.70
if categories.AJUSSAL:
    total = total + categories.AJUSSAL*0.70
if categories.AUSAJUS:
    total = total + categories.AUSAJUS*0.70
if categories.BASESEGU:
  total = total + categories.BASESEGU*0.70
if total &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  total = employee.obtain_value("Salario Minimo", payslip.date_to)*25
if total&lt; 0:
  total= 0
days_off =0
if worked_days.Licencia_no_Remunerada:
  days_off = worked_days.Licencia_no_Remunerada.number_of_days
value_add = ((contract.fix_wage_amount/ 30)*days_off)*0.16
result=employee.round100(total* 0.12)+value_add</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_191" model="hr.salary.rule">
    <field name="name">APORTE SALUD EMPRESA</field>
    <field name="code">APORPENEMPR</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara">500</field>
    <field name="sequence">502</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">deduction = 0
base_sp = categories.BASIC+categories.AUS+categories.AUSINC+categories.BASESEGU+categories.AJUSSAL+categories.AUSAJUS
if base_sp &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  base_sp = employee.obtain_value("Salario Minimo", payslip.date_to)*25
if base_sp &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*10 and base_sp &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  deduction = base_sp*0.085
result =employee.round100(deduction)</field>
    <field name="amount_python_compute">deduction = 0
base_sp = categories.BASIC+categories.AUS+categories.AUSINC+categories.BASESEGU+categories.AJUSSAL+categories.AUSAJUS
if base_sp &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  base_sp = employee.obtain_value("Salario Minimo", payslip.date_to)*25
if base_sp &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*10 and base_sp &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  deduction = base_sp*0.085
result =employee.round100(deduction)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_192" model="hr.salary.rule">
    <field name="name">APORTE SALUD EMPRESA(SI)</field>
    <field name="code">APORPENEMPR</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara">500</field>
    <field name="sequence">503</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">deduction = 0
base_sp = (categories.BASIC+categories.AUS+categories.AUSINC+categories.BASESEGU+categories.AJUSSAL+categories.AUSAJUS)*0.7
if base_sp &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  base_sp = employee.obtain_value("Salario Minimo", payslip.date_to)*25
if base_sp &gt; 1 and base_sp &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  deduction = (base_sp)*0.085
result =employee.round100(deduction)</field>
    <field name="amount_python_compute">deduction = 0
base_sp = (categories.BASIC+categories.AUS+categories.AUSINC+categories.BASESEGU+categories.AJUSSAL+categories.AUSAJUS)*0.7
if base_sp &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  base_sp = employee.obtain_value("Salario Minimo", payslip.date_to)*25
if base_sp &gt; 1 and base_sp &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  deduction = (base_sp)*0.085
result =employee.round100(deduction)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_193" model="hr.salary.rule">
    <field name="name">SENA</field>
    <field name="code">SENA</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">504</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">deduction = 0
base_sn=categories.BASIC+categories.AUS+categories.VACACIONES+categories.AJUSSAL+categories.AUSAJUS
if base_sn &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
  deduction = base_sn*0.02
if  deduction&lt; 0:
  deduction= 0
result =employee.round100(deduction)</field>
    <field name="amount_python_compute">deduction = 0
base_sn=categories.BASIC+categories.AUS+categories.VACACIONES+categories.AJUSSAL+categories.AUSAJUS
if base_sn &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
  deduction = base_sn*0.02
if  deduction&lt; 0:
  deduction= 0
result =employee.round100(deduction)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_194" model="hr.salary.rule">
    <field name="name">SENA(SI)</field>
    <field name="code">SENASI</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">505</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if categories.BASIC:
  total = total + categories.BASIC*0.70
if categories.AJUSSAL:
  total = total + categories.AJUSSAL*0.70
if categories.AUSAJUS:
    total = total + categories.AUSAJUS*0.70
if categories.AUS:
  total = total + categories.AUS*0.70
if categories.VACACIONES:
  total = total + categories.VACACIONES*0.70
if  total&lt; 0:
  total= 0
result=employee.round100((total)* 0.02 )</field>
    <field name="amount_python_compute">total = 0
if categories.BASIC:
  total = total + categories.BASIC*0.70
if categories.AJUSSAL:
  total = total + categories.AJUSSAL*0.70
if categories.AUSAJUS:
    total = total + categories.AUSAJUS*0.70
if categories.AUS:
  total = total + categories.AUS*0.70
if categories.VACACIONES:
  total = total + categories.VACACIONES*0.70
if  total&lt; 0:
  total= 0
result=employee.round100((total)* 0.02 )</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_195" model="hr.salary.rule">
    <field name="name">ICBF</field>
    <field name="code">ICBF</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">506</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">deduction = 0
base_sn=(categories.BASIC+categories.AUS+categories.VACACIONES+categories.AUSAJUS+categories.AJUSSAL)
if base_sn &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
  deduction = base_sn*0.02
if  deduction&lt; 0:
  deduction= 0
result =employee.round100(deduction)</field>
    <field name="amount_python_compute">deduction = 0
base_sn=(categories.BASIC+categories.AUS+categories.VACACIONES+categories.AUSAJUS+categories.AJUSSAL)
if base_sn &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*10:
  deduction = base_sn*0.02
if  deduction&lt; 0:
  deduction= 0
result =employee.round100(deduction)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_196" model="hr.salary.rule">
    <field name="name">ICBF(SI)</field>
    <field name="code">ICBFSI</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">507</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if categories.BASIC:
  total = total + categories.BASIC*0.70
if categories.AJUSSAL:
    total = total + categories.AJUSSAL*0.70
if categories.AUSAJUS:
    total = total + categories.AUSAJUS*0.70
if categories.AUS:
  total = total + categories.AUS*0.70
if categories.VACACIONES:
  total = total + categories.VACACIONES*0.70
if  total&lt; 0:
  total= 0
result=employee.round100(total)</field>
    <field name="amount_python_compute">total = 0
if categories.BASIC:
  total = total + categories.BASIC*0.70
if categories.AJUSSAL:
    total = total + categories.AJUSSAL*0.70
if categories.AUSAJUS:
    total = total + categories.AUSAJUS*0.70
if categories.AUS:
  total = total + categories.AUS*0.70
if categories.VACACIONES:
  total = total + categories.VACACIONES*0.70
if  total&lt; 0:
  total= 0
result=employee.round100((total)* 0.03 )</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_197" model="hr.salary.rule">
    <field name="name">CAJA DE COMPENSACI&#211;N</field>
    <field name="code">CAJACOMPENS</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">508</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if categories.BASIC:
  total = total + categories.BASIC
if categories.AJUSSAL:
    total = total + categories.AJUSSAL
if categories.AUSAJUS:
    total = total + categories.AUSAJUS
if categories.AUS:
  total = total + categories.AUS
if categories.VACACIONES:
  total = total + categories.VACACIONES
if  total&lt; 0:
  total= 0
result=employee.round100(total)</field>
    <field name="amount_python_compute">total = 0
if categories.BASIC:
  total = total + categories.BASIC
if categories.AJUSSAL:
    total = total + categories.AJUSSAL
if categories.AUSAJUS:
    total = total + categories.AUSAJUS
if categories.AUS:
  total = total + categories.AUS
if categories.VACACIONES:
  total = total + categories.VACACIONES
if  total&lt; 0:
  total= 0
result=employee.round100(total* 0.04)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_198" model="hr.salary.rule">
    <field name="name">CAJA DE COMPENSACI&#211;N(SI)</field>
    <field name="code">CAJACOMPENS</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">509</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base">SALINTE*0.70</field>
    <field name="amount_percentage">4</field>
    <field name="condition_python">total = 0
if categories.BASIC:
  total = total + categories.BASIC*0.70
if categories.AJUSSAL:
    total = total + categories.AJUSSAL*0.70
if categories.AUSAJUS:
    total = total + categories.AUSAJUS*0.70
if categories.AUS:
  total = total + categories.AUS*0.70
if categories.VACACIONES:
  total = total + categories.VACACIONES*0.70
if  total&lt; 0:
  total= 0
result=employee.round100(total)</field>
    <field name="amount_python_compute">total = 0
if categories.BASIC:
  total = total + categories.BASIC*0.70
if categories.AJUSSAL:
    total = total + categories.AJUSSAL*0.70
if categories.AUSAJUS:
    total = total + categories.AUSAJUS*0.70
if categories.AUS:
  total = total + categories.AUS*0.70
if categories.VACACIONES:
  total = total + categories.VACACIONES*0.70
if  total&lt; 0:
  total= 0
result=employee.round100((total)* 0.04 )</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_199" model="hr.salary.rule">
    <field name="name">ARL</field>
    <field name="code">ARL</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">510</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">deduction = 0
base_sp = (categories.BASIC + categories.BASESEGU)
if base_sp &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  base_sp = employee.obtain_value("Salario Minimo", payslip.date_to)*25
if base_sp &gt; 1 and base_sp &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  deduction = (base_sp)*contract.arl_percentage
if  deduction&lt; 0:
  deduction= 0
result = employee.round100(deduction)</field>
    <field name="amount_python_compute">deduction = 0
base_sp = (categories.BASIC + categories.BASESEGU)
if base_sp &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  base_sp = employee.obtain_value("Salario Minimo", payslip.date_to)*25
if base_sp &gt; 1 and base_sp &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  deduction = (base_sp)*contract.arl_percentage
if  deduction&lt; 0:
  deduction= 0
result = employee.round100(deduction)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_200" model="hr.salary.rule">
    <field name="name">ARL(si)</field>
    <field name="code">ARL</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">511</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">deduction = 0
base_sp = (categories.BASIC + categories.BASESEGU)*0.7
if base_sp &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  base_sp = employee.obtain_value("Salario Minimo", payslip.date_to)*25
if base_sp &gt; 1 and base_sp &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  deduction = (base_sp)*contract.arl_percentage
if  deduction&lt; 0:
  deduction= 0
result = employee.round100(deduction)</field>
    <field name="amount_python_compute">deduction = 0
base_sp = (categories.BASIC + categories.BASESEGU)*0.7
if base_sp &gt; employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  base_sp = employee.obtain_value("Salario Minimo", payslip.date_to)*25
if base_sp &gt; 1 and base_sp &lt;= employee.obtain_value("Salario Minimo", payslip.date_to)*25:
  deduction = (base_sp)*contract.arl_percentage
if  deduction&lt; 0:
  deduction= 0
result = employee.round100(deduction)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_201" model="hr.salary.rule">
    <field name="name">PROVISION CESANTIAS</field>
    <field name="code">PROVCES</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">512</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to:
  intcespag=0
  acu_ant = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_CESANTIAS")
  prom=employee.get_average_paid_annual_less_pay31(payslip.date_from, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(payslip.date_to)
  amount =prom/days*30
  total =(amount*days)/360-acu_ant  
result=employee.round1(total)
</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to:
  intcespag=0
  acu_ant = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_CESANTIAS")
  prom=employee.get_average_paid_annual_less_pay31(payslip.date_from, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(payslip.date_to)
  amount =prom/days*30
  total =(amount*days)/360-acu_ant  
result=employee.round1(total)
</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_202" model="hr.salary.rule">
    <field name="name">PROVISION INTCESANTIAS</field>
    <field name="code">PROVINTCES</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">513</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to:
  intcespag=0
  acu_ant = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_INT_CESANTIAS")
  prom=employee.get_average_paid_annual_less_pay31(payslip.date_from, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(payslip.date_to)
  amount =prom/days*30
  total =(amount*days)/360  
  total =(total*days*0.12)/360 -acu_ant
result=employee.round1(total) </field>
    <field name="amount_python_compute">total = 0
if payslip.date_to:
  intcespag=0
  acu_ant = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_INT_CESANTIAS")
  prom=employee.get_average_paid_annual_less_pay31(payslip.date_from, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(payslip.date_to)
  amount =prom/days*30
  total =(amount*days)/360  
  total =(total*days*0.12)/360 -acu_ant
result=employee.round1(total) </field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_203" model="hr.salary.rule">
    <field name="name">PROVISION PRIMA</field>
    <field name="code">PROVIPRIMA</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">514</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to:
  intcespag=0
  acu_ant = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_PRIMA")
  prom=employee.get_average_paid_biannual(payslip.date_to, payslip)
  days=employee.get_days_biannual(payslip.date_to)
  amount =prom/days*30
  total =(amount*days)/360 -acu_ant
result=employee.round1(total)</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to:
  intcespag=0
  acu_ant = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_PRIMA")
  prom=employee.get_average_paid_biannual(payslip.date_to, payslip)
  days=employee.get_days_biannual(payslip.date_to)
  amount =prom/days*30
  total =(amount*days)/360 -acu_ant
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_204" model="hr.salary.rule">
    <field name="name">PROVISION VACACIONES(SI)</field>
    <field name="code">PROVIVACACSI</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">515</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if categories.BASIC:
  total = total + categories.BASIC
if categories.AUS:
  total = total + categories.AUS
result=total</field>
    <field name="amount_python_compute">total = 0
if categories.BASIC:
  total = total + categories.BASIC
if categories.AUS:
  total = total + categories.AUS
result=(total)* 0.0417</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_205" model="hr.salary.rule">
    <field name="name">PROVISION VACACIONES</field>
    <field name="code">PROVIVACAC</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">516</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result = (categories.BASIC+categories.AUS+categories.AUSINC+categories.AUX)</field>
    <field name="amount_python_compute">result = (categories.BASIC+categories.AUS+categories.AUSINC+categories.AUX)*0.0417</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_206" model="hr.salary.rule">
    <field name="name">PROVISION PRIMA EXTRA LEGAL</field>
    <field name="code">PROVIPRIMAEXTRA</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">517</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">none</field>
    <field name="amount_select">code</field>
    <field name="quantity">1</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result = (categories.BASIC+categories.AUS+categories.AUX)</field>
    <field name="amount_python_compute">result = (categories.BASIC+categories.AUS+categories.AUX)*0.0417</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_207" model="hr.salary.rule">
    <field name="name">ACUMULADO PROV CESANTIAS</field>
    <field name="code">ACUMPROVCES</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">518</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">aux = 0
total = 0
if not payslip.pay_annual:
  aux = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_CESANTIAS")
  if payslip.date_to:
    intcespag=0
    prom=employee.get_average_paid_annual_less_pay31(payslip.date_from, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
    days=employee.get_days_annual(payslip.date_to)
    amount =prom/days*30
    total =(amount*days)/360
result =employee.round1(total)</field>
    <field name="amount_python_compute">aux = 0
total = 0
if not payslip.pay_annual:
  aux = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_CESANTIAS")
  if payslip.date_to:
    intcespag=0
    prom=employee.get_average_paid_annual_less_pay31(payslip.date_from, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
    days=employee.get_days_annual(payslip.date_to)
    amount =prom/days*30
    total =(amount*days)/360
result =employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_208" model="hr.salary.rule">
    <field name="name">ACUMULADO PROV INT CESANTIAS</field>
    <field name="code">ACUMPROVINTCES</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">519</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">aux = 0
total = 0
if not payslip.pay_annual:
  aux = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_INT_CESANTIAS")
  if payslip.date_to:
    intcespag=0
    prom=employee.get_average_paid_annual_less_pay31(payslip.date_from, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
    days=employee.get_days_annual(payslip.date_to)
    amount =prom/days*30
    total =(amount*days)/360  
    total =(total*days*0.12)/360 
result =employee.round1(total)</field>
    <field name="amount_python_compute">aux = 0
total = 0
if not payslip.pay_annual:
  aux = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_INT_CESANTIAS")
  if payslip.date_to:
    intcespag=0
    prom=employee.get_average_paid_annual_less_pay31(payslip.date_from, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
    days=employee.get_days_annual(payslip.date_to)
    amount =prom/days*30
    total =(amount*days)/360  
    total =(total*days*0.12)/360 
result =employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_209" model="hr.salary.rule">
    <field name="name">ACUMULADO PROV PRIMA</field>
    <field name="code">ACUMPROVPRIM</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">520</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">aux = 0
total = 0
if not payslip.pay_biannual:
  aux = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_PRIMA")
  if payslip.date_to:
    intcespag=0
    prom=employee.get_average_paid_biannual(payslip.date_to, payslip)
    days=employee.get_days_biannual(payslip.date_to)
    amount =prom/days*30
    total =(amount*days)/360
result =employee.round1(total)</field>
    <field name="amount_python_compute">aux = 0
total = 0
if not payslip.pay_biannual:
  aux = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_PRIMA")
  if payslip.date_to:
    intcespag=0
    prom=employee.get_average_paid_biannual(payslip.date_to, payslip)
    days=employee.get_days_biannual(payslip.date_to)
    amount =prom/days*30
    total =(amount*days)/360
result =employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_210" model="hr.salary.rule">
    <field name="name">ACUMULADO PROV PRIMA EXT LEGAL</field>
    <field name="code">ACUMPROVPRIMEXLE</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">521</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">aux = 0
aux = employee.get_acumulate_month_before(payslip.date_from, "PROVIPRIMAEXTRA")
result = aux</field>
    <field name="amount_python_compute">aux = 0
aux = employee.get_acumulate_month_before(payslip.date_from, "PROVIPRIMAEXTRA")
result = aux</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_211" model="hr.salary.rule">
    <field name="name">ACUMULADO PROV VACACIONES</field>
    <field name="code">ACUMPROVVAC</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">522</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">aux = 0
aux = employee.get_acumulate_month_before(payslip.date_from, "PROVIVACAC")
result = aux</field>
    <field name="amount_python_compute">aux = 0
aux = employee.get_acumulate_month_before(payslip.date_from, "PROVIVACAC")
result = aux</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_212" model="hr.salary.rule">
    <field name="name">ACUMULADO PROV VACACIONES SI</field>
    <field name="code">ACUMPROVVACSI</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">523</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">aux = 0
aux = employee.get_acumulate_month_before(payslip.date_from, "PROVIVACACSI")
result = aux</field>
    <field name="amount_python_compute">aux = 0
aux = employee.get_acumulate_month_before(payslip.date_from, "PROVIVACACSI")
result = aux</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_213" model="hr.salary.rule">
    <field name="name">APORTE SALUD EMPRESA APRENDIZ SENA EP</field>
    <field name="code">APSALEMPAPRSENAEP</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">524</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100,Vacaciones,Incapacidad,Licencia_de_Paternidad,Licencia_de_Maternidad,Licencia_Por_Luto</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
amount=0
salmin = employee.obtain_value("Salario Minimo", payslip.date_to)
base_sn=categories.BASIC+categories.AUS
if salmin &gt;= base_sn:
  amount = salmin*0.125
if amount&lt; 0:
  amount = 0
if amount &gt; 0:
  total = (worked_days.WORK100.number_of_days)*(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result = employee.round100(total)</field>
    <field name="amount_python_compute">total = 0
amount=0
salmin = employee.obtain_value("Salario Minimo", payslip.date_to)
base_sn=categories.BASIC+categories.AUS
if salmin &gt;= base_sn:
  amount = salmin*0.125
if amount&lt; 0:
  amount = 0
if amount &gt; 0:
  total = (worked_days.WORK100.number_of_days)*(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result = employee.round100(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_214" model="hr.salary.rule">
    <field name="name">APORTE SALUD EMPRESA APRENDIZ SENA EL</field>
    <field name="code">APSALEMPAPRSENAEL</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">525</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
amount=0
salmin = employee.obtain_value("Salario Minimo", payslip.date_to)
base_sn=categories.BASIC+categories.AUS
if salmin &gt; base_sn:
  amount = salmin*0.125
if amount&lt; 0:
  amount = 0
if amount &gt; 0:
  total = (worked_days.WORK100.number_of_days)*(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result = employee.round100(total)</field>
    <field name="amount_python_compute">total = 0
amount=0
salmin = employee.obtain_value("Salario Minimo", payslip.date_to)
base_sn=categories.BASIC+categories.AUS
if salmin &gt; base_sn:
  amount = salmin*0.125
if amount&lt; 0:
  amount = 0
if amount &gt; 0:
  total = (worked_days.WORK100.number_of_days)*(amount/30)
  if worked_days.Vacaciones:
    total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
  if worked_days.Incapacidad:
    total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
  if worked_days.Licencia_de_Paternidad:
    total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
  if worked_days.Licencia_de_Maternidad:
    total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
  if worked_days.Licencia_Por_Luto:
    total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result = employee.round100(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_215" model="hr.salary.rule">
    <field name="name">FONDO DE SOLIDARIDAD EMPR</field>
    <field name="code">FSPEMP</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">526</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">deduction = 0
result = 0
base_fs = categories.BASIC +categories.AUS+ categories.BASESEGU+categories.AJUSSAL+categories.AUSAJUS
salmin = employee.obtain_value("Salario Minimo", payslip.date_to)
if base_fs &gt; salmin*25:
  base_fs = salmin*25
if base_fs &gt; salmin*4 and base_fs &lt;= salmin*16:
  deduction = base_fs*0.01
if base_fs &gt; salmin*16 and base_fs &lt;= salmin*17:
  deduction = base_fs*0.012
if base_fs &gt; salmin*17 and base_fs &lt;= salmin*18:
  deduction = base_fs*0.014
if base_fs &gt; salmin*18 and base_fs &lt;= salmin*19:
  deduction = base_fs*0.016
if base_fs &gt; salmin*19 and base_fs &lt;= salmin*20:
  deduction = base_fs*0.018
if base_fs &gt; salmin*20:
  deduction = base_fs*0.02
deduction_emp = 0
if deduction &gt; 0:
  if worked_days.Licencia_no_Remunerada:
    days_off = worked_days.Licencia_no_Remunerada.number_of_days
    value_add = ((contract.fix_wage_amount/ 30)*days_off)
    base_fs += value_add
    if base_fs &gt; salmin*25:
      base_fs = salmin*25
    if base_fs &gt; salmin*4 and base_fs &lt;= salmin*16:
      deduction_emp = base_fs*0.01
    if base_fs &gt; salmin*16 and base_fs &lt;= salmin*17:
      deduction_emp = base_fs*0.012
    if base_fs &gt; salmin*17 and base_fs &lt;= salmin*18:
      deduction_emp = base_fs*0.014
    if base_fs &gt; salmin*18 and base_fs &lt;= salmin*19:
      deduction_emp = base_fs*0.016
    if base_fs &gt; salmin*19 and base_fs &lt;= salmin*20:
      deduction_emp = base_fs*0.018
    if base_fs &gt; salmin*20:
      deduction_emp = base_fs*0.02
    result = deduction_emp - deduction
else:
  if worked_days.Licencia_no_Remunerada:
    days_off = worked_days.Licencia_no_Remunerada.number_of_days
    value_add = ((contract.fix_wage_amount/ 30)*days_off)
    base_fs += value_add
    if base_fs &gt; salmin*25:
      base_fs = salmin*25
    if base_fs &gt; salmin*4 and base_fs &lt;= salmin*16:
      deduction_emp = base_fs*0.01
    if base_fs &gt; salmin*16 and base_fs &lt;= salmin*17:
      deduction_emp = base_fs*0.012
    if base_fs &gt; salmin*17 and base_fs &lt;= salmin*18:
      deduction_emp = base_fs*0.014
    if base_fs &gt; salmin*18 and base_fs &lt;= salmin*19:
      deduction_emp = base_fs*0.016
    if base_fs &gt; salmin*19 and base_fs &lt;= salmin*20:
      deduction_emp = base_fs*0.018
    if base_fs &gt; salmin*20:
      deduction_emp = base_fs*0.02
    result = deduction_emp
result = result</field>
    <field name="amount_python_compute">deduction = 0
result = 0
base_fs = categories.BASIC +categories.AUS+ categories.BASESEGU+categories.AJUSSAL+categories.AUSAJUS
salmin = employee.obtain_value("Salario Minimo", payslip.date_to)
if base_fs &gt; salmin*25:
  base_fs = salmin*25
if base_fs &gt; salmin*4 and base_fs &lt;= salmin*16:
  deduction = base_fs*0.01
if base_fs &gt; salmin*16 and base_fs &lt;= salmin*17:
  deduction = base_fs*0.012
if base_fs &gt; salmin*17 and base_fs &lt;= salmin*18:
  deduction = base_fs*0.014
if base_fs &gt; salmin*18 and base_fs &lt;= salmin*19:
  deduction = base_fs*0.016
if base_fs &gt; salmin*19 and base_fs &lt;= salmin*20:
  deduction = base_fs*0.018
if base_fs &gt; salmin*20:
  deduction = base_fs*0.02
deduction_emp = 0
if deduction &gt; 0:
  if worked_days.Licencia_no_Remunerada:
    days_off = worked_days.Licencia_no_Remunerada.number_of_days
    value_add = ((contract.fix_wage_amount/ 30)*days_off)
    base_fs += value_add
    if base_fs &gt; salmin*25:
      base_fs = salmin*25
    if base_fs &gt; salmin*4 and base_fs &lt;= salmin*16:
      deduction_emp = base_fs*0.01
    if base_fs &gt; salmin*16 and base_fs &lt;= salmin*17:
      deduction_emp = base_fs*0.012
    if base_fs &gt; salmin*17 and base_fs &lt;= salmin*18:
      deduction_emp = base_fs*0.014
    if base_fs &gt; salmin*18 and base_fs &lt;= salmin*19:
      deduction_emp = base_fs*0.016
    if base_fs &gt; salmin*19 and base_fs &lt;= salmin*20:
      deduction_emp = base_fs*0.018
    if base_fs &gt; salmin*20:
      deduction_emp = base_fs*0.02
    result = deduction_emp - deduction
else:
  if worked_days.Licencia_no_Remunerada:
    days_off = worked_days.Licencia_no_Remunerada.number_of_days
    value_add = ((contract.fix_wage_amount/ 30)*days_off)
    base_fs += value_add
    if base_fs &gt; salmin*25:
      base_fs = salmin*25
    if base_fs &gt; salmin*4 and base_fs &lt;= salmin*16:
      deduction_emp = base_fs*0.01
    if base_fs &gt; salmin*16 and base_fs &lt;= salmin*17:
      deduction_emp = base_fs*0.012
    if base_fs &gt; salmin*17 and base_fs &lt;= salmin*18:
      deduction_emp = base_fs*0.014
    if base_fs &gt; salmin*18 and base_fs &lt;= salmin*19:
      deduction_emp = base_fs*0.016
    if base_fs &gt; salmin*19 and base_fs &lt;= salmin*20:
      deduction_emp = base_fs*0.018
    if base_fs &gt; salmin*20:
      deduction_emp = base_fs*0.02
    result = deduction_emp
result = result</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_216" model="hr.salary.rule">
    <field name="name">ARL APRENDICES Y PASANTES</field>
    <field name="code">ARLAPREYPASAN</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">528</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value">WORK100</field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">result=employee.round100(contract.arl_percentage*(worked_days.WORK100.number_of_days )*(employee.obtain_value("Salario Minimo", payslip.date_to) / 30))</field>
    <field name="amount_python_compute">result=employee.round100(contract.arl_percentage*(worked_days.WORK100.number_of_days )*(employee.obtain_value("Salario Minimo", payslip.date_to) / 30))</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_217" model="hr.salary.rule">
    <field name="name">ACUMULADO ANTICIPO PRIMA</field>
    <field name="code">ACUMANTPRIM</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">600</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="True"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">aux = 0
if payslip.date_to and not payslip.pay_biannual:
  aux = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PRIMA_PAGADA")
  total = 0
  if categories.BASIC:
    total = total + categories.BASIC
  if categories.AUS:
    total = total + categories.AUS
  if categories.AJUSSAL:
    total = total + categories.AJUSSAL
  if categories.AUSAJUS:
    total = total + categories.AUSAJUS
  if categories.AUSINC:
    total = total + categories.AUSINC
  if categories.AUXTRANS:
    total = total + categories.AUXTRANS
  aux = aux + (total)* 0.08333333
result =employee.round1(aux)</field>
    <field name="amount_python_compute">aux = 0
if payslip.date_to and not payslip.pay_biannual:
  aux = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PRIMA_PAGADA")
  total = 0
  if categories.BASIC:
    total = total + categories.BASIC
  if categories.AUS:
    total = total + categories.AUS
  if categories.AJUSSAL:
    total = total + categories.AJUSSAL
  if categories.AUSAJUS:
    total = total + categories.AUSAJUS
  if categories.AUSINC:
    total = total + categories.AUSINC
  if categories.AUXTRANS:
    total = total + categories.AUXTRANS
  aux = aux + (total)* 0.08333333
result =employee.round1(aux)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_218" model="hr.salary.rule">
    <field name="name">CESANTIAS CONSOLIDADAS</field>
    <field name="code">CESCONSOL</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara"></field>
    <field name="sequence">600</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'CESCONSOL':
        cespag=0
        cespag=employee.get_acumulate_month_before(payslip.date_to, "CESANTIAS_PAGADAS")
        prom=employee.get_average_paid_annual(payslip.date_from, payslip)
        days=employee.get_days_annual(payslip.date_to)
        amount =prom/days*30
        total =(amount*days)/360 - cespag
result=total</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'CESCONSOL':
        cespag=0
        cespag=employee.get_acumulate_month_before(payslip.date_to, "CESANTIAS_PAGADAS")
        prom=employee.get_average_paid_annual(payslip.date_from, payslip)
        days=employee.get_days_annual(payslip.date_to)
        amount =prom/days*30
        total =(amount*days)/360 - cespag
result=total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_219" model="hr.salary.rule">
    <field name="name">BASE PROV CESANTIAS</field>
    <field name="code">BASPROVCES</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">600</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to:
  intcespag=0
  acu_ant = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_CESANTIAS")
  prom=employee.get_average_paid_annual_less_pay31(payslip.date_from, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(payslip.date_to)
  amount =prom/days*30
  total =(amount*days)/360-acu_ant  
result=employee.round1(amount)</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to:
  intcespag=0
  acu_ant = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_CESANTIAS")
  prom=employee.get_average_paid_annual_less_pay31(payslip.date_from, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(payslip.date_to)
  amount =prom/days*30
  total =(amount*days)/360-acu_ant  
result=employee.round1(amount)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_220" model="hr.salary.rule">
    <field name="name">INT CESANTIAS CONSOLIDADAS</field>
    <field name="code">INTCESCONSOL</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara"></field>
    <field name="sequence">601</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'INTCESCONSOL':
        intcespag=0
        intcespag=employee.get_acumulate_month_before(payslip.date_to, "INT_CES_PAGADAS")
        prom=employee.get_average_paid_annual_or_wage(payslip.date_from,
payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
        days=employee.get_days_annual(payslip.date_to)
        amount =prom/days*30
        total =(amount*days)/360
        total =(total*days*0.12)/360 - intcespag   
result=employee.round1(total)</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to:
  if payslip.rule_ids:
    for r_id in payslip.rule_ids:
      if r_id.code == 'INTCESCONSOL':
        intcespag=0
        intcespag=employee.get_acumulate_month_before(payslip.date_to, "INT_CES_PAGADAS")
        prom=employee.get_average_paid_annual_or_wage(payslip.date_from,
payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
        days=employee.get_days_annual(payslip.date_to)
        amount =prom/days*30
        total =(amount*days)/360
        total =(total*days*0.12)/360 - intcespag   
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_221" model="hr.salary.rule">
    <field name="name">BASE PROV INT CESANTIAS</field>
    <field name="code">BASPROVINTCES</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">601</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to:
  intcespag=0
  acu_ant = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_INT_CESANTIAS")
  prom=employee.get_average_paid_annual_less_pay31(payslip.date_from, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(payslip.date_to)
  amount =prom/days*30
  total =(amount*days)/360  
  total =(total*days*0.12)/360 -acu_ant
result=employee.round1(amount) </field>
    <field name="amount_python_compute">total = 0
if payslip.date_to:
  intcespag=0
  acu_ant = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_INT_CESANTIAS")
  prom=employee.get_average_paid_annual_less_pay31(payslip.date_from, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(payslip.date_to)
  amount =prom/days*30
  total =(amount*days)/360  
  total =(total*days*0.12)/360 -acu_ant
result=employee.round1(amount) </field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_222" model="hr.salary.rule">
    <field name="name">BASE PROV PRIMA</field>
    <field name="code">BASPROVPRIM</field>
    <field name="category_id" ref="hr_salary_rule_category_COMP_one"/>
    <field name="code_sara"></field>
    <field name="sequence">602</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="condition_python">total = 0
if payslip.date_to:
  intcespag=0
  acu_ant = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_PRIMA")
  prom=employee.get_average_paid_biannual(payslip.date_to, payslip)
  days=employee.get_days_biannual(payslip.date_to)
  amount =prom/days*30
  total =(amount*days)/360 -acu_ant
result=employee.round1(amount)</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to:
  intcespag=0
  acu_ant = employee.get_acumulate_month_before(payslip.date_from, "ACUM_PROV_PRIMA")
  prom=employee.get_average_paid_biannual(payslip.date_to, payslip)
  days=employee.get_days_biannual(payslip.date_to)
  amount =prom/days*30
  total =(amount*days)/360 -acu_ant
result=employee.round1(amount)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_223" model="hr.salary.rule">
    <field name="name">INDEMNIZACION</field>
    <field name="code">INDEM</field>
    <field name="category_id" ref="hr_salary_rule_category_OTROS"/>
    <field name="code_sara"></field>
    <field name="sequence">0</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="active" eval="False"/>
    <field name="asigned_base">model</field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.fix_wage_amount/30
total = 0
ley1991 = employee.calculate_year_input(payslip)
total_days = employee.calculate_days_compensation(payslip)
if ley1991 == 0:
  if total_days > 0:
    if contract.fix_wage_amount &lt; 8281160:
      if total_days &lt;= 360:
        acc_days = 30
      else:
        total_days = total_days - 360
        acc_days = (20/360)*total_days
        acc_days += 30
      total = acc_days*wage_day
    else:
      if total_days &lt;= 360:
        acc_days = 20
      else:
        acc_days = 20
        total_days = total_days - 360
        acc_days = (15/360)*total_days
        acc_days += 20
      total = acc_days*wage_day
else:
  if total_days &lt;= 360:
    acc_days = 45
  else:
    total_days = total_days - 360
    employee.imprimir_valores(total_days, "totaldias")
    acc_days = (40/360)*total_days
    employee.imprimir_valores(acc_days, "acumulado")
    acc_days += 45
    employee.imprimir_valores(acc_days, "acumulado")
  total = acc_days*wage_day
if payslip.rule_ids:
  for r_id in payslip.rule_ids:
    if r_id.code == 'INDEM':
      total_final = total
result = total_final</field>
    <field name="condition_python">total_days = 0
total_final = 0
acc_days = 0
wage_day =  contract.fix_wage_amount/30
total = 0
ley1991 = employee.calculate_year_input(payslip)
total_days = employee.calculate_days_compensation(payslip)
if ley1991 == 0:
  if total_days > 0:
    if contract.fix_wage_amount &lt; 8281160:
      if total_days &lt;= 360:
        acc_days = 30
      else:
        total_days = total_days - 360
        acc_days = (20/360)*total_days
        acc_days += 30
      total = acc_days*wage_day
    else:
      if total_days &lt;= 360:
        acc_days = 20
      else:
        acc_days = 20
        total_days = total_days - 360
        acc_days = (15/360)*total_days
        acc_days += 20
      total = acc_days*wage_day
else:
  if total_days &lt;= 360:
    acc_days = 45
  else:
    total_days = total_days - 360
    employee.imprimir_valores(total_days, "totaldias")
    acc_days = (40/360)*total_days
    employee.imprimir_valores(acc_days, "acumulado")
    acc_days += 45
    employee.imprimir_valores(acc_days, "acumulado")
  total = acc_days*wage_day
if payslip.rule_ids:
  for r_id in payslip.rule_ids:
    if r_id.code == 'INDEM':
      total_final = total
result = total_final</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_224" model="hr.salary.rule">
    <field name="name">AUXILIO MONETARIO EDUCACION ADICIONAL</field>
    <field name="code">AUXMONEDUCADICI</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara"></field>
    <field name="sequence">161</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Aux monetario educacion adicional")
result = amount_total</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Aux monetario educacion adicional")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_225" model="hr.salary.rule">
    <field name="name">AUXILIO MONETARIO MEDIOS TRANSPORTE ADICIONAL</field>
    <field name="code">AUXMONTRANSADICI</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara"></field>
    <field name="sequence">162</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Aux monetario medios trans adicional")
result = amount_total</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Aux monetario medios trans adicional")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_226" model="hr.salary.rule">
    <field name="name">AUXILIO MONETARIO VIVIENDA ADICIONAL</field>
    <field name="code">AUXMONVIVADICI</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara"></field>
    <field name="sequence">163</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">amount_total = employee.get_novelties(payslip.date_to, "Aux monetario vivienda adicional")
result = amount_total</field>
    <field name="condition_python">amount_total = employee.get_novelties(payslip.date_to, "Aux monetario vivienda adicional")
result = amount_total</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_227" model="hr.salary.rule">
    <field name="name">DESC CESANTIAS CAMBIO VINCULACION</field>
    <field name="code">DESCCESCAMVIN</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara"></field>
    <field name="sequence">273</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to and payslip.transfer_employee:
  cespag=0
  cespag=employee.get_acumulate_month_before(payslip.date_to, "CESANTIAS_PAGADAS") 
  prom=employee.get_average_paid_annual_termination(contract.date_end, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(contract.date_end)
  amount =prom/days*30
  total =(amount*days)/360 - cespag
result=total</field>
    <field name="condition_python">total = 0
if payslip.date_to and payslip.transfer_employee:
  cespag=0
  cespag=employee.get_acumulate_month_before(payslip.date_to, "CESANTIAS_PAGADAS") 
  prom=employee.get_average_paid_annual_termination(contract.date_end, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(contract.date_end)
  amount =prom/days*30
  total =(amount*days)/360 - cespag
result=total*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_228" model="hr.salary.rule">
    <field name="name">DESC INTERESES DE CESANTIAS CAMBIO VINCULACION</field>
    <field name="code">DESCINTCESCAMVIN</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara"></field>
    <field name="sequence">274</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to and payslip.transfer_employee:
  intcespag=0
  intcespag=employee.get_acumulate_month_before(payslip.date_to, "INT_CES_PAGADAS") 
  prom=employee.get_average_paid_annual_termination(contract.date_end, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(contract.date_end)
  amount =prom/days*30
  total =(amount*days)/360 
  total =(total*days*0.12)/360 - intcespag
result=total</field>
    <field name="condition_python">total = 0
if payslip.date_to and payslip.transfer_employee:
  intcespag=0
  intcespag=employee.get_acumulate_month_before(payslip.date_to, "INT_CES_PAGADAS") 
  prom=employee.get_average_paid_annual_termination(contract.date_end, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(contract.date_end)
  amount =prom/days*30
  total =(amount*days)/360 
  total =(total*days*0.12)/360 - intcespag
result=total*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_229" model="hr.salary.rule">
    <field name="name">DESC PRIMA CAMBIO VINCULACION</field>
    <field name="code">DESC PRIMA CAMBIO VINCULACION</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara"></field>
    <field name="sequence">275</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">total = 0
if contract.date_end:
  if payslip.date_to and payslip.transfer_employee:
    prom=employee.get_average_paid_biannual_termination(contract.date_end, payslip, ('BASIC', 'AJUSSAL' ,'AUSAJUS', 'AUS', 'AUSINC', 'AUXTRANS'))
    days=employee.get_days_biannual(contract.date_end)
    amount =prom/days*30
    total =(amount*days)/360
if worked_days.WORK100.number_of_days &lt; 0:
 total = total - employee.get_value_line_payslip_before(payslip, ('PRIMA LEGAL'))
result=employee.round1(total)</field>
    <field name="condition_python">total = 0
if payslip.date_to and payslip.transfer_employee:
  intcespag=0
  intcespag=employee.get_acumulate_month_before(payslip.date_to, "INT_CES_PAGADAS") 
  prom=employee.get_average_paid_annual_termination(contract.date_end, payslip, ('BASIC', 'AUS', 'AUSINC', 'AUXTRANS'))
  days=employee.get_days_annual(contract.date_end)
  amount =prom/days*30
  total =(amount*days)/360 
  total =(total*days*0.12)/360 - intcespag
result=total*-1</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_230" model="hr.salary.rule">
    <field name="name">DESC VACACIONES CAMBIO VINCULACION</field>
    <field name="code">DESCVACCAMVINC</field>
    <field name="category_id" ref="hr_salary_rule_category_DED_one"/>
    <field name="code_sara"></field>
    <field name="sequence">276</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to and payslip.transfer_employee:
  total = employee.holidays_month_actual(payslip.date_to, payslip)*(contract.wage/30)
if total &lt; 0:
  total=0
result=employee.round1(total)</field>
    <field name="condition_python">total = 0
if payslip.date_to and payslip.transfer_employee:
  total = employee.holidays_month_actual(payslip.date_to, payslip)*(contract.wage/30)
if total &lt; 0:
  total=0
result=employee.round1(total*-1)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_231" model="hr.salary.rule">
    <field name="name">PRIMA CAMBIO VINCULACION</field>
    <field name="code">PRIMCAMVIN</field>
    <field name="category_id" ref="hr_salary_rule_category_PRESTAC"/>
    <field name="code_sara"></field>
    <field name="sequence">68</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">total = 0
if contract.date_end:
  if payslip.date_to and payslip.transfer_employee:
    prom=employee.get_average_paid_biannual_termination(contract.date_end, payslip, ('BASIC', 'AJUSSAL' ,'AUSAJUS', 'AUS', 'AUSINC', 'AUXTRANS'))
    days=employee.get_days_biannual(contract.date_end)
    amount =prom/days*30
    total =(amount*days)/360
if worked_days.WORK100.number_of_days &lt; 0:
 total = total - employee.get_value_line_payslip_before(payslip, ('PRIMA LEGAL'))
result=employee.round1(total)</field>
    <field name="condition_python">total = 0
if contract.date_end:
  if payslip.date_to and payslip.transfer_employee:
    prom=employee.get_average_paid_biannual_termination(contract.date_end, payslip, ('BASIC', 'AJUSSAL' ,'AUSAJUS', 'AUS', 'AUSINC', 'AUXTRANS'))
    days=employee.get_days_biannual(contract.date_end)
    amount =prom/days*30
    total =(amount*days)/360
if worked_days.WORK100.number_of_days &lt; 0:
 total = total - employee.get_value_line_payslip_before(payslip, ('PRIMA LEGAL'))
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_232" model="hr.salary.rule">
    <field name="name">VACACIONES CAMBIO VINCULACION</field>
    <field name="code">VACCAMBVIN</field>
    <field name="category_id" ref="hr_salary_rule_category_VACACIONES"/>
    <field name="code_sara"></field>
    <field name="sequence">69</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="False"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="False"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">total = 0
if payslip.date_to and payslip.transfer_employee:
  total = employee.holidays_month_actual(payslip.date_to, payslip)*(contract.wage/30)
if total &lt; 0:
  total=0
result=employee.round1(total)</field>
    <field name="condition_python">total = 0
if payslip.date_to and payslip.transfer_employee:
  total = employee.holidays_month_actual(payslip.date_to, payslip)*(contract.wage/30)
if total &lt; 0:
  total=0
result=employee.round1(total)</field>
    <field name="register_id"></field>
  </record>
  <record id="hr_salary_rule_233" model="hr.salary.rule">
    <field name="name">VALES GASOLINA</field>
    <field name="code">VALESGASOL</field>
    <field name="category_id" ref="hr_salary_rule_category_AUX"/>
    <field name="code_sara"></field>
    <field name="sequence">133</field>
    <field name="appears_on_payslip" eval="True"/>
    <field name="fixed" eval="False"/>
    <field name="is_flex" eval="True"/>
    <field name="autocomplete_flex" eval="False"/>
    <field name="accumulate" eval="False"/>
    <field name="print_payslip" eval="True"/>
    <field name="total_cost" eval="False"/>
    <field name="projection_exempt" eval="False"/>
    <field name="work_days_value"></field>
    <field name="calculate_base" eval="False"/>
    <field name="asigned_base"></field>
    <field name="model"></field>
    <field name="field"></field>
    <field name="value"></field>
    <field name="categ"></field>
    <field name="condition_select">python</field>
    <field name="amount_select">code</field>
    <field name="quantity">1.0</field>
    <field name="amount_fix">0</field>
    <field name="amount_percentage_base"></field>
    <field name="amount_percentage">0</field>
    <field name="amount_python_compute">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'VALESGASOL':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)


result= total</field>
    <field name="condition_python">amount=0
total = 0
for contract_rule in contract.flex_wage_ids:
  if contract_rule.salary_rule_id.code == 'VALESGASOL':
    amount = contract_rule.amount
    total = (worked_days.WORK100.number_of_days) *(amount/30)
    if worked_days.Vacaciones:
      total = total +(worked_days.Vacaciones.number_of_days) *(amount/30)
    if worked_days.Incapacidad:
      total = total +(worked_days.Incapacidad.number_of_days) *(amount/30)
    if worked_days.Licencia_de_Paternidad:
      total = total +(worked_days.Licencia_de_Paternidad.number_of_days)*(amount/30)  
    if worked_days.Licencia_de_Maternidad:
      total = total +(worked_days.Licencia_de_Maternidad.number_of_days)*(amount/30)
    if worked_days.Licencia_Por_Luto:
      total = total +(worked_days.Licencia_Por_Luto.number_of_days)*(amount/30)
result= employee.round1(total)</field>
    <field name="register_id"></field>
  </record>

</odoo>
